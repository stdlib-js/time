{
  "version": 3,
  "sources": ["../base/parse-duration/lib/main.js", "../base/parse-duration/lib/index.js", "../base/lib/index.js", "../current-year/lib/main.js", "../current-year/lib/index.js", "../days-in-month/lib/days.json", "../days-in-month/lib/main.js", "../days-in-month/lib/index.js", "../day-of-year/lib/months.json", "../day-of-year/lib/days.json", "../day-of-year/lib/main.js", "../day-of-year/lib/index.js", "../quarter-of-year/lib/quarters.json", "../quarter-of-year/lib/main.js", "../quarter-of-year/lib/index.js", "../day-of-quarter/lib/main.js", "../day-of-quarter/lib/index.js", "../days-in-year/lib/main.js", "../days-in-year/lib/index.js", "../duration2ms/lib/main.js", "../duration2ms/lib/index.js", "../hours-in-month/lib/hours.json", "../hours-in-month/lib/main.js", "../hours-in-month/lib/index.js", "../hours-in-year/lib/main.js", "../hours-in-year/lib/index.js", "../iso-weeks-in-year/lib/main.js", "../iso-weeks-in-year/lib/index.js", "../minutes-in-month/lib/minutes.json", "../minutes-in-month/lib/main.js", "../minutes-in-month/lib/index.js", "../minutes-in-year/lib/main.js", "../minutes-in-year/lib/index.js", "../ms2duration/lib/main.js", "../ms2duration/lib/index.js", "../now/lib/detect.js", "../now/lib/main.js", "../now/lib/polyfill.js", "../now/lib/index.js", "../seconds-in-month/lib/seconds.json", "../seconds-in-month/lib/main.js", "../seconds-in-month/lib/index.js", "../seconds-in-year/lib/main.js", "../seconds-in-year/lib/index.js", "../tic/lib/main.js", "../tic/lib/index.js", "../toc/lib/main.js", "../toc/lib/index.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lowercase = require( '@stdlib/string/base/lowercase' );\n\n\n// VARIABLES //\n\nvar RE_TIME_UNIT = /(\\d+)([a-z]+)/gi;\nvar UNITS = {\n\t'd': 'days',\n\t'h': 'hours',\n\t'm': 'minutes',\n\t's': 'seconds',\n\t'ms': 'milliseconds'\n};\n\n\n// MAIN //\n\n/**\n* Parses a duration string into an object.\n*\n* ## Notes\n*\n* -   A duration string is a string containing a sequence of time units. A time unit is a nonnegative integer followed by a unit identifier. The following unit identifiers are supported:\n*\n*     -   `d`: days\n*     -   `h`: hours\n*     -   `m`: minutes\n*     -   `s`: seconds\n*     -   `ms`: milliseconds\n*\n*     For example, the string `1m3s10ms` is a duration string containing three time units: `1m` (1 minute), `3s` (3 seconds), and `10ms` (10 milliseconds). The string `60m` is a duration string containing a single time unit: `60m` (60 minutes).\n*\n* -   Duration strings are case insensitive. For example, the string `1M3S10MS` is equivalent to `1m3s10ms`.\n*\n* -   If a duration string does not contain a time unit, the respective property is set to `0`.\n*\n* -   An empty string is considered a valid duration string and is parsed as `0d0h0m0s0ms`.\n*\n* @param {string} str - duration string\n* @returns {Object} duration object\n*\n* @example\n* var obj = parseDuration( '1m3s10ms' );\n* // returns { 'days': 0, 'hours': 0, 'minutes': 1, 'seconds': 3, 'milliseconds': 10 }\n*\n* @example\n* var obj = parseDuration( '1m3s' );\n* // returns { 'days': 0, 'hours': 0, 'minutes': 1, 'seconds': 3, 'milliseconds': 0 }\n*/\nfunction parseDuration( str ) {\n\tvar parts;\n\tvar out;\n\tvar u;\n\n\tout = {\n\t\t'days': 0,\n\t\t'hours': 0,\n\t\t'minutes': 0,\n\t\t'seconds': 0,\n\t\t'milliseconds': 0\n\t};\n\tif ( str.length === 0 ) {\n\t\treturn out;\n\t}\n\tstr = lowercase( str );\n\tparts = RE_TIME_UNIT.exec( str );\n\twhile ( parts ) {\n\t\tu = UNITS[ parts[ 2 ] ];\n\t\tif ( u ) {\n\t\t\tout[ u ] = parseInt( parts[ 1 ], 10 );\n\t\t}\n\t\tparts = RE_TIME_UNIT.exec( str );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = parseDuration;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Parse a duration string into an object.\n*\n* @module @stdlib/time/base/parse-duration\n*\n* @example\n* var parseDuration = require( '@stdlib/time/base/parse-duration' );\n*\n* var obj = parseDuration( '1m3s10ms' );\n* // returns { 'days': 0, 'hours': 0, 'minutes': 1, 'seconds': 3, 'milliseconds': 10 }\n*\n* obj = parseDuration( '1d3h' );\n* // returns { 'days': 1, 'hours': 3, 'minutes': 9, 'seconds': 0, 'milliseconds': 0 }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name parseDuration\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/base/parse-duration}\n*/\nsetReadOnly( ns, 'parseDuration', require( './../../base/parse-duration' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the current year.\n*\n* @returns {integer} current year\n*\n* @example\n* var y = currentYear();\n* // returns <number>\n*/\nfunction currentYear() {\n\treturn (new Date()).getFullYear();\n}\n\n\n// EXPORTS //\n\nmodule.exports = currentYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Current year.\n*\n* @module @stdlib/time/current-year\n*\n* @example\n* var currentYear = require( '@stdlib/time/current-year' );\n*\n* var y = currentYear();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"1\": 31,\n\t\"jan\": 31,\n\t\"january\": 31,\n\t\"2\": 28,\n\t\"feb\": 28,\n\t\"february\": 28,\n\t\"3\": 31,\n\t\"mar\": 31,\n\t\"march\": 31,\n\t\"4\": 30,\n\t\"apr\": 30,\n\t\"april\": 30,\n\t\"5\": 31,\n\t\"may\": 31,\n\t\"6\": 30,\n\t\"jun\": 30,\n\t\"june\": 30,\n\t\"7\": 31,\n\t\"jul\": 31,\n\t\"july\": 31,\n\t\"8\": 31,\n\t\"aug\": 31,\n\t\"august\": 31,\n\t\"9\": 30,\n\t\"sep\": 30,\n\t\"september\": 30,\n\t\"10\": 31,\n\t\"oct\": 31,\n\t\"october\": 31,\n\t\"11\": 30,\n\t\"nov\": 30,\n\t\"november\": 30,\n\t\"12\": 31,\n\t\"dec\": 31,\n\t\"december\": 31\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar currentYear = require( './../../current-year' );\nvar DAYS_IN_MONTH = require( './days.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of days in a month.\n*\n* @param {(string|Date|integer)} [month] - month (or Date)\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} days in a month\n*\n* @example\n* var num = daysInMonth();\n* // returns <number>\n*\n* @example\n* var num = daysInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = daysInMonth( 2, 2016 );\n* // returns 29\n*\n* @example\n* var num = daysInMonth( 2, 2017 );\n* // returns 28\n*/\nfunction daysInMonth( month, year ) {\n\tvar days;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tdays = DAYS_IN_MONTH[ mon ];\n\tif ( days === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\tif ( days === 28 && isLeapYear( yr ) ) {\n\t\tdays += 1;\n\t}\n\treturn days;\n}\n\n\n// EXPORTS //\n\nmodule.exports = daysInMonth;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of days in a month.\n*\n* @module @stdlib/time/days-in-month\n*\n* @example\n* var daysInMonth = require( '@stdlib/time/days-in-month' );\n*\n* var num = daysInMonth();\n* // returns <number>\n*\n* num = daysInMonth( 2 );\n* // returns <number>\n*\n* num = daysInMonth( 2, 2016 );\n* // returns 29\n*\n* num = daysInMonth( 2, 2017 );\n* // returns 28\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"1\": 1,\n\t\"jan\": 1,\n\t\"january\": 1,\n\t\"2\": 2,\n\t\"feb\": 2,\n\t\"february\": 2,\n\t\"3\": 3,\n\t\"mar\": 3,\n\t\"march\": 3,\n\t\"4\": 4,\n\t\"apr\": 4,\n\t\"april\": 4,\n\t\"5\": 5,\n\t\"may\": 5,\n\t\"6\": 6,\n\t\"jun\": 6,\n\t\"june\": 6,\n\t\"7\": 7,\n\t\"jul\": 7,\n\t\"july\": 7,\n\t\"8\": 8,\n\t\"aug\": 8,\n\t\"august\": 8,\n\t\"9\": 9,\n\t\"sep\": 9,\n\t\"september\": 9,\n\t\"10\": 10,\n\t\"oct\": 10,\n\t\"october\": 10,\n\t\"11\": 11,\n\t\"nov\": 11,\n\t\"november\": 11,\n\t\"12\": 12,\n\t\"dec\": 12,\n\t\"december\": 12\n}\n", "[31,28,31,30,31,30,31,31,30,31,30,31]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar daysInMonth = require( './../../days-in-month' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar format = require( '@stdlib/string/format' );\nvar MONTHS = require( './months.json' );\nvar DAYS = require( './days.json' );\n\n\n// MAIN //\n\n/**\n* Returns the day of the year.\n*\n* @param {(string|integer|Date)} [month] - month (or Date)\n* @param {integer} [day] - day\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} second argument must be greater than `0` and less than or equal to the maximum number of days in a month\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} day of the year\n*\n* @example\n* var day = dayOfYear();\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( 12, 31, 2017 );\n* // returns 365\n*\n* @example\n* var day = dayOfYear( 12, 31, 2016 );\n* // returns 366\n*/\nfunction dayOfYear( month, day, year ) {\n\tvar date;\n\tvar days;\n\tvar num;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tvar i;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tdate = new Date();\n\t\tmon = date.getMonth() + 1; // zero-based\n\t\tyr = date.getFullYear();\n\t\td = date.getDate();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tdate = month;\n\t\t\tmon = date.getMonth() + 1; // zero-based\n\t\t\tyr = date.getFullYear();\n\t\t\td = date.getDate();\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. If only providing a single argument, must provide a Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( day ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', day ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\td = day;\n\t\tyr = year;\n\t}\n\tdays = daysInMonth( mon, yr );\n\tif ( d < 1 || d > days ) {\n\t\tthrow new RangeError( format( 'invalid argument. Day number must be on the interval: [1, %u]. Value: `%d`.', days, d ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tmon = MONTHS[ mon ];\n\tnum = 0;\n\tfor ( i = 0; i < mon-1; i++ ) {\n\t\tnum += DAYS[ i ];\n\n\t\t// Check for February during a leap year...\n\t\tif ( i === 1 && isLeapYear( yr ) ) {\n\t\t\tnum += 1;\n\t\t}\n\t}\n\tnum += d;\n\treturn num;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dayOfYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the day of the year.\n*\n* @module @stdlib/time/day-of-year\n*\n* @example\n* var dayOfYear = require( '@stdlib/time/day-of-year' );\n*\n* var day = dayOfYear();\n* // returns <number>\n*\n* day = dayOfYear( new Date() );\n* // returns <number>\n*\n* day = dayOfYear( 12, 31, 2017 );\n* // returns 365\n*\n* day = dayOfYear( 12, 31, 2016 );\n* // returns 366\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"1\": 1,\n\t\"jan\": 1,\n\t\"january\": 1,\n\t\"2\": 1,\n\t\"feb\": 1,\n\t\"february\": 1,\n\t\"3\": 1,\n\t\"mar\": 1,\n\t\"march\": 1,\n\t\"4\": 2,\n\t\"apr\": 2,\n\t\"april\": 2,\n\t\"5\": 2,\n\t\"may\": 2,\n\t\"6\": 2,\n\t\"jun\": 2,\n\t\"june\": 2,\n\t\"7\": 3,\n\t\"jul\": 3,\n\t\"july\": 3,\n\t\"8\": 3,\n\t\"aug\": 3,\n\t\"august\": 3,\n\t\"9\": 3,\n\t\"sep\": 3,\n\t\"september\": 3,\n\t\"10\": 4,\n\t\"oct\": 4,\n\t\"october\": 4,\n\t\"11\": 4,\n\t\"nov\": 4,\n\t\"november\": 4,\n\t\"12\": 4,\n\t\"dec\": 4,\n\t\"december\": 4\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar format = require( '@stdlib/string/format' );\nvar QUARTERS = require( './quarters.json' );\n\n\n// MAIN //\n\n/**\n* Returns the quarter of the year.\n*\n* @param {(integer|string|Date)} [month] - month (or `Date`)\n* @throws {TypeError} must provide either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @returns {integer} quarter of the year\n*\n* @example\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var q = quarterOfYear( 4 );\n* // returns 2\n*\n* @example\n* var q = quarterOfYear( 'June' );\n* // returns 2\n*/\nfunction quarterOfYear( month ) {\n\tvar mon;\n\tvar q;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tmon = month.getMonth() + 1; // zero-based\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tmon = ( new Date() ).getMonth() + 1; // zero-based\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tq = QUARTERS[ mon ];\n\tif ( q === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', month ) );\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nmodule.exports = quarterOfYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the quarter of the year.\n*\n* @module @stdlib/time/quarter-of-year\n*\n* @example\n* var quarterOfYear = require( '@stdlib/time/quarter-of-year' );\n*\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* q = quarterOfYear( 4 );\n* // returns 2\n*\n* q = quarterOfYear( 'June' );\n* // returns 2\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar dayOfYear = require( './../../day-of-year' );\nvar quarterOfYear = require( './../../quarter-of-year' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\n// Quarter days:\nvar NON_LEAP_YEAR = [ 0, 90, 181, 273 ];\nvar LEAP_YEAR = [ 0, 91, 182, 274 ];\n\n\n// MAIN //\n\n/**\n* Returns the day of the quarter.\n*\n* @param {(string|integer|Date)} [month] - month (or `Date`)\n* @param {integer} [day] - day\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} second argument must be greater than `0` and less than or equal to the maximum number of days in a month\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} day of the quarter\n*\n* @example\n* var day = dayOfQuarter();\n* // returns <number>\n*\n* day = dayOfQuarter( new Date() );\n* // returns <number>\n*\n* day = dayOfQuarter( 12, 31, 2017 );\n* // returns 92\n*/\nfunction dayOfQuarter( month, day, year ) {\n\tvar date;\n\tvar yr;\n\tvar q;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tdate = new Date();\n\t\tq = quarterOfYear( date );\n\t\td = dayOfYear( date );\n\t\tyr = date.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tdate = month;\n\t\t\tq = quarterOfYear( date );\n\t\t\td = dayOfYear( date );\n\t\t\tyr = date.getFullYear();\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. If only providing a single argument, must provide a Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( day ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', day ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tq = quarterOfYear( month );\n\t\td = dayOfYear( month, day, year );\n\t\tyr = year;\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn d - LEAP_YEAR[ q-1 ];\n\t}\n\treturn d - NON_LEAP_YEAR[ q-1 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = dayOfQuarter;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the day of the quarter.\n*\n* @module @stdlib/time/day-of-quarter\n*\n* @example\n* var dayOfQuarter = require( '@stdlib/time/day-of-quarter' );\n*\n* var day = dayOfQuarter();\n* // returns <number>\n*\n* day = dayOfQuarter( new Date() );\n* // returns <number>\n*\n* day = dayOfQuarter( 12, 31, 2017 );\n* // returns 92\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar currentYear = require( './../../current-year' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 365;\nvar LEAP_YEAR = 366;\n\n\n// MAIN //\n\n/**\n* Returns the number of days in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of days in a year\n*\n* @example\n* var num = daysInYear();\n* // returns <number>\n*\n* @example\n* var num = daysInYear( 2016 );\n* // returns 366\n*\n* @example\n* var num = daysInYear( 2017 );\n* // returns 365\n*/\nfunction daysInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = daysInYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of days in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/days-in-year\n*\n* @example\n* var daysInYear = require( '@stdlib/time/days-in-year' );\n*\n* var num = daysInYear();\n* // returns <number>\n*\n* num = daysInYear( 2016 );\n* // returns 366\n*\n* num = daysInYear( 2017 );\n* // returns 365\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDurationString = require( '@stdlib/assert/is-duration-string' );\nvar parseDuration = require( './../../base/parse-duration' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Converts a duration string to milliseconds.\n*\n* ## Notes\n*\n* -   A duration string is a string containing a sequence of time units. A time unit is a nonnegative integer followed by a unit identifier. The following unit identifiers are supported:\n*\n*     -   `d`: days\n*     -   `h`: hours\n*     -   `m`: minutes\n*     -   `s`: seconds\n*     -   `ms`: milliseconds\n*\n*     For example, the string `1m3s10ms` is a duration string containing three time units: `1m` (1 minute), `3s` (3 seconds), and `10ms` (10 milliseconds). The string `60m` is a duration string containing a single time unit: `60m` (60 minutes).\n*\n* -   Duration strings are case insensitive. For example, the string `1M3S10MS` is equivalent to `1m3s10ms`.\n*\n* @param {string} str - duration string\n* @throws {TypeError} must provide a duration string\n* @returns {NonNegativeInteger} milliseconds\n*\n* @example\n* var ms = duration2ms( '1d' );\n* // returns 86400000\n*\n* @example\n* var ms = duration2ms( '1d2h3m4s5ms' );\n* // returns 93784005\n*/\nfunction duration2ms( str ) {\n\tvar duration;\n\tvar out;\n\n\tif ( !isDurationString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a valid duration string. Value: `%s`.', str ) );\n\t}\n\tduration = parseDuration( str );\n\tout = duration.days * 86400000;\n\tout += duration.hours * 3600000;\n\tout += duration.minutes * 60000;\n\tout += duration.seconds * 1000;\n\tout += duration.milliseconds;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = duration2ms;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a duration string to milliseconds.\n*\n* @module @stdlib/time/duration2ms\n*\n* @example\n* var duration2ms = require( '@stdlib/time/duration2ms' );\n*\n* var ms = duration2ms( '1d' );\n* // returns 86400000\n*\n* ms = duration2ms( '1d2h3m4s5ms' );\n* // returns 93784005\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"1\": 744,\n\t\"jan\": 744,\n\t\"january\": 744,\n\t\"2\": 672,\n\t\"feb\": 672,\n\t\"february\": 672,\n\t\"3\": 744,\n\t\"mar\": 744,\n\t\"march\": 744,\n\t\"4\": 720,\n\t\"apr\": 720,\n\t\"april\": 720,\n\t\"5\": 744,\n\t\"may\": 744,\n\t\"6\": 720,\n\t\"jun\": 720,\n\t\"june\": 720,\n\t\"7\": 744,\n\t\"jul\": 744,\n\t\"july\": 744,\n\t\"8\": 744,\n\t\"aug\": 744,\n\t\"august\": 744,\n\t\"9\": 720,\n\t\"sep\": 720,\n\t\"september\": 720,\n\t\"10\": 744,\n\t\"oct\": 744,\n\t\"october\": 744,\n\t\"11\": 720,\n\t\"nov\": 720,\n\t\"november\": 720,\n\t\"12\": 744,\n\t\"dec\": 744,\n\t\"december\": 744\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar HOURS_IN_DAY = require( '@stdlib/constants/time/hours-in-day' );\nvar currentYear = require( './../../current-year' );\nvar HOURS_IN_MONTH = require( './hours.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of hours in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} hours in a month\n*\n* @example\n* var num = hoursInMonth();\n* // returns <number>\n*\n* @example\n* var num = hoursInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = hoursInMonth( 2, 2016 );\n* // returns 696\n*\n* @example\n* var num = hoursInMonth( 2, 2017 );\n* // returns 672\n*/\nfunction hoursInMonth( month, year ) {\n\tvar hrs;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\thrs = HOURS_IN_MONTH[ mon ];\n\tif ( hrs === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( hrs === 672 && isLeapYear( yr ) ) {\n\t\thrs += HOURS_IN_DAY;\n\t}\n\treturn hrs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hoursInMonth;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of hours in a month.\n*\n* @module @stdlib/time/hours-in-month\n*\n* @example\n* var hoursInMonth = require( '@stdlib/time/hours-in-month' );\n*\n* var num = hoursInMonth();\n* // returns <number>\n*\n* num = hoursInMonth( 2 );\n* // returns <number>\n*\n* num = hoursInMonth( 2, 2016 );\n* // returns 696\n*\n* num = hoursInMonth( 2, 2017 );\n* // returns 672\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar currentYear = require( './../../current-year' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 8760|0; // 365 * 24\nvar LEAP_YEAR = 8784|0; // 366 * 24\n\n\n// MAIN //\n\n/**\n* Returns the number of hours in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of hours in a year\n*\n* @example\n* var num = hoursInYear();\n* // returns <number>\n*\n* @example\n* var num = hoursInYear( 2016 );\n* // returns 8784\n*\n* @example\n* var num = hoursInYear( 2017 );\n* // returns 8760\n*/\nfunction hoursInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hoursInYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of hours in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/hours-in-year\n*\n* @example\n* var hoursInYear = require( '@stdlib/time/hours-in-year' );\n*\n* var num = hoursInYear();\n* // returns <number>\n*\n* num = hoursInYear( 2016 );\n* // returns 8784\n*\n* num = hoursInYear( 2017 );\n* // returns 8760\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar currentYear = require( './../../current-year' );\n\n\n// VARIABLES //\n\nvar SHORT_YEAR = 52;\nvar LONG_YEAR = 53;\n\n\n// FUNCTIONS //\n\n/**\n* Formula for determining if a year is \"long\" or \"short\".\n*\n* @private\n* @param {integer} yr - year\n* @returns {integer} result\n*/\nfunction p( yr ) {\n\tvar v = yr + floor( yr/4 ) - floor( yr/100 ) + floor( yr/400 );\n\treturn v % 7;\n}\n\n\n// MAIN //\n\n/**\n* Returns the number of ISO weeks in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of ISO weeks in a year\n*\n* @example\n* var num = isoWeeksInYear();\n* // returns <number>\n*\n* @example\n* var num = isoWeeksInYear( 2015 );\n* // returns 53\n*\n* @example\n* var num = isoWeeksInYear( 2017 );\n* // returns 52\n*/\nfunction isoWeeksInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( p( yr ) === 4 || p( yr-1 ) === 3 ) {\n\t\treturn LONG_YEAR;\n\t}\n\treturn SHORT_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isoWeeksInYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of ISO weeks in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/iso-weeks-in-year\n*\n* @example\n* var isoWeeksInYear = require( '@stdlib/time/iso-weeks-in-year' );\n*\n* var num = isoWeeksInYear();\n* // returns <number>\n*\n* num = isoWeeksInYear( 2015 );\n* // returns 53\n*\n* num = isoWeeksInYear( 2017 );\n* // returns 52\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"1\": 44640,\n\t\"jan\": 44640,\n\t\"january\": 44640,\n\t\"2\": 40320,\n\t\"feb\": 40320,\n\t\"february\": 40320,\n\t\"3\": 44640,\n\t\"mar\": 44640,\n\t\"march\": 44640,\n\t\"4\": 43200,\n\t\"apr\": 43200,\n\t\"april\": 43200,\n\t\"5\": 44640,\n\t\"may\": 44640,\n\t\"6\": 43200,\n\t\"jun\": 43200,\n\t\"june\": 43200,\n\t\"7\": 44640,\n\t\"jul\": 44640,\n\t\"july\": 44640,\n\t\"8\": 44640,\n\t\"aug\": 44640,\n\t\"august\": 44640,\n\t\"9\": 43200,\n\t\"sep\": 43200,\n\t\"september\": 43200,\n\t\"10\": 44640,\n\t\"oct\": 44640,\n\t\"october\": 44640,\n\t\"11\": 43200,\n\t\"nov\": 43200,\n\t\"november\": 43200,\n\t\"12\": 44640,\n\t\"dec\": 44640,\n\t\"december\": 44640\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar MINUTES_IN_DAY = require( '@stdlib/constants/time/minutes-in-day' );\nvar currentYear = require( './../../current-year' );\nvar MINUTES_IN_MONTH = require( './minutes.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of minutes in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} minutes in a month\n*\n* @example\n* var num = minutesInMonth();\n* // returns <number>\n*\n* @example\n* var num = minutesInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = minutesInMonth( 2, 2016 );\n* // returns 41760\n*\n* @example\n* var num = minutesInMonth( 2, 2017 );\n* // returns 40320\n*/\nfunction minutesInMonth( month, year ) {\n\tvar mins;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tmins = MINUTES_IN_MONTH[ mon ];\n\tif ( mins === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( mins === 40320 && isLeapYear( yr ) ) {\n\t\tmins += MINUTES_IN_DAY;\n\t}\n\treturn mins;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minutesInMonth;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of minutes in a month.\n*\n* @module @stdlib/time/minutes-in-month\n*\n* @example\n* var minutesInMonth = require( '@stdlib/time/minutes-in-month' );\n*\n* var num = minutesInMonth();\n* // returns <number>\n*\n* num = minutesInMonth( 2 );\n* // returns <number>\n*\n* num = minutesInMonth( 2, 2016 );\n* // returns 41760\n*\n* num = minutesInMonth( 2, 2017 );\n* // returns 40320\n*/\n\n// MODULES //\n\nvar minutesInMonth = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = minutesInMonth;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar currentYear = require( './../../current-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 525600|0; // 365 * 24 * 60\nvar LEAP_YEAR = 527040|0; // 366 * 24 * 60\n\n\n// MAIN //\n\n/**\n* Returns the number of minutes in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of minutes in a year\n*\n* @example\n* var num = minutesInYear();\n* // returns <number>\n*\n* @example\n* var num = minutesInYear( 2016 );\n* // returns 527040\n*\n* @example\n* var num = minutesInYear( 2017 );\n* // returns 525600\n*/\nfunction minutesInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minutesInYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of minutes in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/minutes-in-year\n*\n* @example\n* var minutesInYear = require( '@stdlib/time/minutes-in-year' );\n*\n* var num = minutesInYear();\n* // returns <number>\n*\n* num = minutesInYear( 2016 );\n* // returns 527040\n*\n* num = minutesInYear( 2017 );\n* // returns 525600\n*/\n\n// MODULES //\n\nvar minutesInYear = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = minutesInYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Converts a number of milliseconds to a string duration.\n*\n* @param {number} ms - number of milliseconds\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {string} duration\n*\n* @example\n* var str = ms2duration( 1030 );\n* // returns '1s30ms'\n*\n* @example\n* var str = ms2duration( 3600000 );\n* // returns '1h'\n*/\nfunction ms2duration( ms ) {\n\tvar out;\n\tif ( !isNonNegativeInteger( ms ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', ms ) );\n\t}\n\tif ( ms === 0 ) {\n\t\treturn '0ms';\n\t}\n\tout = '';\n\tif ( ms >= 86400000 ) {\n\t\tout += floor(ms/86400000) + 'd';\n\t\tms %= 86400000;\n\t}\n\tif ( ms >= 3600000 ) {\n\t\tout += floor(ms/3600000) + 'h';\n\t\tms %= 3600000;\n\t}\n\tif ( ms >= 60000 ) {\n\t\tout += floor(ms/60000) + 'm';\n\t\tms %= 60000;\n\t}\n\tif ( ms >= 1000 ) {\n\t\tout += floor(ms/1000) + 's';\n\t\tms %= 1000;\n\t}\n\tif ( ms > 0 ) {\n\t\tout += ms + 'ms';\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ms2duration;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a number of milliseconds to a string duration.\n*\n* @module @stdlib/time/ms2duration\n*\n* @example\n* var ms2duration = require( '@stdlib/time/ms2duration' );\n*\n* var duration = ms2duration( 1030 );\n* // returns '1s30ms'\n*\n* duration = ms2duration( 3600000 );\n* // returns '1h'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\n\n\n// MAIN //\n\nvar bool = isFunction( Date.now );\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar round = require( '@stdlib/math/base/special/round' );\n\n\n// MAIN //\n\n/**\n* Returns the time in seconds since the epoch.\n*\n* @returns {integer32} time\n*\n* @example\n* var ts = now();\n* // returns <number>\n*/\nfunction now() {\n\tvar ts = round( Date.now() / 1000 );\n\treturn ts|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = now;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar round = require( '@stdlib/math/base/special/round' );\n\n\n// MAIN //\n\n/**\n* Returns the time in seconds since the epoch.\n*\n* @private\n* @returns {integer32} time\n*\n* @example\n* var ts = now();\n* // returns <number>\n*/\nfunction now() {\n\tvar ts;\n\tvar d;\n\n\td = new Date();\n\tts = round( d.getTime() / 1000 );\n\treturn ts|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = now;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Time in seconds since the epoch.\n*\n* @module @stdlib/time/now\n*\n* @example\n* var now = require( '@stdlib/time/now' );\n*\n* var ts = now();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar bool = require( './detect.js' );\nvar main = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar now;\nif ( bool ) {\n\tnow = main;\n} else {\n\tnow = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = now;\n", "{\n\t\"1\": 2678400,\n\t\"jan\": 2678400,\n\t\"january\": 2678400,\n\t\"2\": 2419200,\n\t\"feb\": 2419200,\n\t\"february\": 2419200,\n\t\"3\": 2678400,\n\t\"mar\": 2678400,\n\t\"march\": 2678400,\n\t\"4\": 2592000,\n\t\"apr\": 2592000,\n\t\"april\": 2592000,\n\t\"5\": 2678400,\n\t\"may\": 2678400,\n\t\"6\": 2592000,\n\t\"jun\": 2592000,\n\t\"june\": 2592000,\n\t\"7\": 2678400,\n\t\"jul\": 2678400,\n\t\"july\": 2678400,\n\t\"8\": 2678400,\n\t\"aug\": 2678400,\n\t\"august\": 2678400,\n\t\"9\": 2592000,\n\t\"sep\": 2592000,\n\t\"september\": 2592000,\n\t\"10\": 2678400,\n\t\"oct\": 2678400,\n\t\"october\": 2678400,\n\t\"11\": 2592000,\n\t\"nov\": 2592000,\n\t\"november\": 2592000,\n\t\"12\": 2678400,\n\t\"dec\": 2678400,\n\t\"december\": 2678400\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar currentYear = require( './../../current-year' );\nvar format = require( '@stdlib/string/format' );\nvar SECONDS_IN_DAY = require( '@stdlib/constants/time/seconds-in-day' );\nvar SECONDS_IN_MONTH = require( './seconds.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of seconds in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} seconds in a month\n*\n* @example\n* var num = secondsInMonth();\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2, 2016 );\n* // returns 2505600\n*\n* @example\n* var num = secondsInMonth( 2, 2017 );\n* // returns 2419200\n*/\nfunction secondsInMonth( month, year ) {\n\tvar secs;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tsecs = SECONDS_IN_MONTH[ mon ];\n\tif ( secs === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( secs === 2419200 && isLeapYear( yr ) ) {\n\t\tsecs += SECONDS_IN_DAY;\n\t}\n\treturn secs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = secondsInMonth;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of seconds in a month.\n*\n* @module @stdlib/time/seconds-in-month\n*\n* @example\n* var secondsInMonth = require( '@stdlib/time/seconds-in-month' );\n*\n* var num = secondsInMonth();\n* // returns <number>\n*\n* num = secondsInMonth( 2 );\n* // returns <number>\n*\n* num = secondsInMonth( 2, 2016 );\n* // returns 2505600\n*\n* num = secondsInMonth( 2, 2017 );\n* // returns 2419200\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar currentYear = require( './../../current-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 31536000|0; // 365 * 86400\nvar LEAP_YEAR = 31622400|0; // 366 * 86400\n\n\n// MAIN //\n\n/**\n* Returns the number of seconds in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of seconds in a year\n*\n* @example\n* var num = secondsInYear();\n* // returns <number>\n*\n* @example\n* var num = secondsInYear( 2016 );\n* // returns 31622400\n*\n* @example\n* var num = secondsInYear( 2017 );\n* // returns 31536000\n*/\nfunction secondsInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = secondsInYear;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of seconds in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/seconds-in-year\n*\n* @example\n* var secondsInYear = require( '@stdlib/time/seconds-in-year' );\n*\n* var num = secondsInYear();\n* // returns <number>\n*\n* num = secondsInYear( 2016 );\n* // returns 31622400\n*\n* num = secondsInYear( 2017 );\n* // returns 31536000\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar proc = require( 'process' );\n\n\n// MAIN //\n\n/**\n* Returns a high-resolution time.\n*\n* ## Notes\n*\n* -   Output format: `[seconds, nanoseconds]`.\n*\n* @returns {NumberArray} high resolution time\n*\n* @example\n* var t = tic();\n* // returns [<number>,<number>]\n*/\nfunction tic() {\n\treturn proc.hrtime();\n}\n\n\n// EXPORTS //\n\nmodule.exports = tic;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a high-resolution time.\n*\n* @module @stdlib/time/tic\n*\n* @example\n* var tic = require( '@stdlib/time/tic' );\n*\n* var t = tic();\n* // returns [<number>,<number>]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;\nvar format = require( '@stdlib/string/format' );\nvar tic = require( './../../tic' );\n\n\n// MAIN //\n\n/**\n* Returns a high-resolution time difference.\n*\n* ## Notes\n*\n* -   Output format: `[seconds, nanoseconds]`.\n*\n* @param {NonNegativeIntegerArray} time - high-resolution time\n* @throws {TypeError} must provide a nonnegative integer array\n* @throws {RangeError} input array must have length `2`\n* @returns {NumberArray} high resolution time difference\n*\n* @example\n* var tic = require( '@stdlib/time/tic' );\n*\n* var start = tic();\n* var delta = toc( start );\n* // returns [<number>,<number>]\n*/\nfunction toc( time ) {\n\tvar now = tic();\n\tvar sec;\n\tvar ns;\n\tif ( !isNonNegativeIntegerArray( time ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array of nonnegative integers. Value: `%s`.', time ) );\n\t}\n\tif ( time.length !== 2 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Input array must contain two elements. Value: `%s`.', time ) );\n\t}\n\tsec = now[ 0 ] - time[ 0 ];\n\tns = now[ 1 ] - time[ 1 ];\n\tif ( sec > 0 && ns < 0 ) {\n\t\tsec -= 1;\n\t\tns += 1e9;\n\t}\n\telse if ( sec < 0 && ns > 0 ) {\n\t\tsec += 1;\n\t\tns -= 1e9;\n\t}\n\treturn [ sec, ns ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = toc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a high-resolution time difference.\n*\n* @module @stdlib/time/toc\n*\n* @example\n* var tic = require( '@stdlib/time/tic' );\n* var toc = require( '@stdlib/time/toc' );\n*\n* var start = tic();\n* var delta = toc( start );\n* // returns [<number>,<number>]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name constants\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/time}\n*/\nsetReadOnly( ns, 'constants', require( '@stdlib/constants/time' ) );\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/time/base}\n*/\nsetReadOnly( ns, 'base', require( './../base' ) );\n\n/**\n* @name currentYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/current-year}\n*/\nsetReadOnly( ns, 'currentYear', require( './../current-year' ) );\n\n/**\n* @name dayOfQuarter\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/day-of-quarter}\n*/\nsetReadOnly( ns, 'dayOfQuarter', require( './../day-of-quarter' ) );\n\n/**\n* @name dayOfYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/day-of-year}\n*/\nsetReadOnly( ns, 'dayOfYear', require( './../day-of-year' ) );\n\n/**\n* @name daysInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/days-in-month}\n*/\nsetReadOnly( ns, 'daysInMonth', require( './../days-in-month' ) );\n\n/**\n* @name daysInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/days-in-year}\n*/\nsetReadOnly( ns, 'daysInYear', require( './../days-in-year' ) );\n\n/**\n* @name duration2ms\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/duration2ms}\n*/\nsetReadOnly( ns, 'duration2ms', require( './../duration2ms' ) );\n\n/**\n* @name hoursInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/hours-in-month}\n*/\nsetReadOnly( ns, 'hoursInMonth', require( './../hours-in-month' ) );\n\n/**\n* @name hoursInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/hours-in-year}\n*/\nsetReadOnly( ns, 'hoursInYear', require( './../hours-in-year' ) );\n\n/**\n* @name isoWeeksInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/iso-weeks-in-year}\n*/\nsetReadOnly( ns, 'isoWeeksInYear', require( './../iso-weeks-in-year' ) );\n\n/**\n* @name minutesInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/minutes-in-month}\n*/\nsetReadOnly( ns, 'minutesInMonth', require( './../minutes-in-month' ) );\n\n/**\n* @name minutesInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/minutes-in-year}\n*/\nsetReadOnly( ns, 'minutesInYear', require( './../minutes-in-year' ) );\n\n/**\n* @name ms2duration\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/ms2duration}\n*/\nsetReadOnly( ns, 'ms2duration', require( './../ms2duration' ) );\n\n/**\n* @name now\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/now}\n*/\nsetReadOnly( ns, 'now', require( './../now' ) );\n\n/**\n* @name quarterOfYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/quarter-of-year}\n*/\nsetReadOnly( ns, 'quarterOfYear', require( './../quarter-of-year' ) );\n\n/**\n* @name secondsInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/seconds-in-month}\n*/\nsetReadOnly( ns, 'secondsInMonth', require( './../seconds-in-month' ) );\n\n/**\n* @name secondsInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/seconds-in-year}\n*/\nsetReadOnly( ns, 'secondsInYear', require( './../seconds-in-year' ) );\n\n/**\n* @name tic\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/tic}\n*/\nsetReadOnly( ns, 'tic', require( './../tic' ) );\n\n/**\n* @name toc\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/toc}\n*/\nsetReadOnly( ns, 'toc', require( './../toc' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "lowercase", "RE_TIME_UNIT", "UNITS", "parseDuration", "str", "parts", "out", "u", "require_lib", "__commonJSMin", "exports", "module", "main", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_main", "__commonJSMin", "exports", "module", "currentYear", "require_lib", "__commonJSMin", "exports", "module", "main", "require_days", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isString", "isInteger", "lowercase", "isLeapYear", "format", "currentYear", "DAYS_IN_MONTH", "daysInMonth", "month", "year", "days", "mon", "yr", "d", "require_lib", "__commonJSMin", "exports", "module", "main", "require_months", "__commonJSMin", "exports", "module", "require_days", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isString", "isInteger", "daysInMonth", "isLeapYear", "lowercase", "format", "MONTHS", "DAYS", "dayOfYear", "month", "day", "year", "date", "days", "num", "mon", "yr", "d", "i", "require_lib", "__commonJSMin", "exports", "module", "main", "require_quarters", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isString", "isInteger", "lowercase", "format", "QUARTERS", "quarterOfYear", "month", "mon", "q", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isString", "isInteger", "dayOfYear", "quarterOfYear", "isLeapYear", "format", "NON_LEAP_YEAR", "LEAP_YEAR", "dayOfQuarter", "month", "day", "year", "date", "yr", "q", "d", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isInteger", "isLeapYear", "format", "currentYear", "NON_LEAP_YEAR", "LEAP_YEAR", "daysInYear", "value", "yr", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isDurationString", "parseDuration", "format", "duration2ms", "str", "duration", "out", "require_lib", "__commonJSMin", "exports", "module", "main", "require_hours", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isString", "isInteger", "lowercase", "isLeapYear", "format", "HOURS_IN_DAY", "currentYear", "HOURS_IN_MONTH", "hoursInMonth", "month", "year", "hrs", "mon", "yr", "d", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isInteger", "isLeapYear", "format", "currentYear", "NON_LEAP_YEAR", "LEAP_YEAR", "hoursInYear", "value", "yr", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isInteger", "format", "floor", "currentYear", "SHORT_YEAR", "LONG_YEAR", "p", "yr", "v", "isoWeeksInYear", "value", "require_lib", "__commonJSMin", "exports", "module", "main", "require_minutes", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isString", "isInteger", "lowercase", "isLeapYear", "format", "MINUTES_IN_DAY", "currentYear", "MINUTES_IN_MONTH", "minutesInMonth", "month", "year", "mins", "mon", "yr", "d", "require_lib", "__commonJSMin", "exports", "module", "minutesInMonth", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isInteger", "isLeapYear", "currentYear", "format", "NON_LEAP_YEAR", "LEAP_YEAR", "minutesInYear", "value", "yr", "require_lib", "__commonJSMin", "exports", "module", "minutesInYear", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "floor", "format", "ms2duration", "ms", "out", "require_lib", "__commonJSMin", "exports", "module", "main", "require_detect", "__commonJSMin", "exports", "module", "isFunction", "bool", "require_main", "__commonJSMin", "exports", "module", "round", "now", "ts", "require_polyfill", "__commonJSMin", "exports", "module", "round", "now", "ts", "d", "require_lib", "__commonJSMin", "exports", "module", "bool", "main", "polyfill", "now", "require_seconds", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isString", "isInteger", "lowercase", "isLeapYear", "currentYear", "format", "SECONDS_IN_DAY", "SECONDS_IN_MONTH", "secondsInMonth", "month", "year", "secs", "mon", "yr", "d", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isInteger", "isLeapYear", "currentYear", "format", "NON_LEAP_YEAR", "LEAP_YEAR", "secondsInYear", "value", "yr", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "proc", "tic", "require_lib", "__commonJSMin", "exports", "module", "main", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeIntegerArray", "format", "tic", "toc", "time", "now", "sec", "ns", "require_lib", "__commonJSMin", "exports", "module", "main", "setReadOnly", "ns"]
}
