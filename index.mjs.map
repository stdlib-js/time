{"version":3,"file":"index.mjs","sources":["../base/parse-duration/lib/main.js","../base/lib/index.js","../current-year/lib/main.js","../days-in-month/lib/main.js","../day-of-year/lib/main.js","../quarter-of-year/lib/main.js","../day-of-quarter/lib/main.js","../days-in-year/lib/main.js","../duration2ms/lib/main.js","../hours-in-month/lib/main.js","../hours-in-year/lib/main.js","../iso-weeks-in-year/lib/main.js","../minutes-in-month/lib/main.js","../minutes-in-year/lib/main.js","../ms2duration/lib/main.js","../now/lib/index.js","../now/lib/detect.js","../now/lib/main.js","../now/lib/polyfill.js","../seconds-in-month/lib/main.js","../seconds-in-year/lib/main.js","../tic/lib/main.js","../toc/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport lowercase from '@stdlib/string/base/lowercase';\n\n\n// VARIABLES //\n\nvar RE_TIME_UNIT = /(\\d+)([a-z]+)/gi;\nvar UNITS = {\n\t'd': 'days',\n\t'h': 'hours',\n\t'm': 'minutes',\n\t's': 'seconds',\n\t'ms': 'milliseconds'\n};\n\n\n// MAIN //\n\n/**\n* Parses a duration string into an object.\n*\n* ## Notes\n*\n* -   A duration string is a string containing a sequence of time units. A time unit is a nonnegative integer followed by a unit identifier. The following unit identifiers are supported:\n*\n*     -   `d`: days\n*     -   `h`: hours\n*     -   `m`: minutes\n*     -   `s`: seconds\n*     -   `ms`: milliseconds\n*\n*     For example, the string `1m3s10ms` is a duration string containing three time units: `1m` (1 minute), `3s` (3 seconds), and `10ms` (10 milliseconds). The string `60m` is a duration string containing a single time unit: `60m` (60 minutes).\n*\n* -   Duration strings are case insensitive. For example, the string `1M3S10MS` is equivalent to `1m3s10ms`.\n*\n* -   If a duration string does not contain a time unit, the respective property is set to `0`.\n*\n* -   An empty string is considered a valid duration string and is parsed as `0d0h0m0s0ms`.\n*\n* @param {string} str - duration string\n* @returns {Object} duration object\n*\n* @example\n* var obj = parseDuration( '1m3s10ms' );\n* // returns { 'days': 0, 'hours': 0, 'minutes': 1, 'seconds': 3, 'milliseconds': 10 }\n*\n* @example\n* var obj = parseDuration( '1m3s' );\n* // returns { 'days': 0, 'hours': 0, 'minutes': 1, 'seconds': 3, 'milliseconds': 0 }\n*/\nfunction parseDuration( str ) {\n\tvar parts;\n\tvar out;\n\tvar u;\n\n\tout = {\n\t\t'days': 0,\n\t\t'hours': 0,\n\t\t'minutes': 0,\n\t\t'seconds': 0,\n\t\t'milliseconds': 0\n\t};\n\tif ( str.length === 0 ) {\n\t\treturn out;\n\t}\n\tstr = lowercase( str );\n\tparts = RE_TIME_UNIT.exec( str );\n\twhile ( parts ) {\n\t\tu = UNITS[ parts[ 2 ] ];\n\t\tif ( u ) {\n\t\t\tout[ u ] = parseInt( parts[ 1 ], 10 );\n\t\t}\n\t\tparts = RE_TIME_UNIT.exec( str );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default parseDuration;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name parseDuration\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/base/parse-duration}\n*/\nimport parseDuration from './../../base/parse-duration';\nsetReadOnly( ns, 'parseDuration', parseDuration );\n\n\n// EXPORTS //\n\nexport default ns;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the current year.\n*\n* @returns {integer} current year\n*\n* @example\n* var y = currentYear();\n* // returns <number>\n*/\nfunction currentYear() {\n\treturn (new Date()).getFullYear();\n}\n\n\n// EXPORTS //\n\nexport default currentYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport lowercase from '@stdlib/string/lowercase';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport format from '@stdlib/string/format';\nimport currentYear from './../../current-year';\nimport DAYS_IN_MONTH from './days.json';\n\n\n// MAIN //\n\n/**\n* Returns the number of days in a month.\n*\n* @param {(string|Date|integer)} [month] - month (or Date)\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} days in a month\n*\n* @example\n* var num = daysInMonth();\n* // returns <number>\n*\n* @example\n* var num = daysInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = daysInMonth( 2, 2016 );\n* // returns 29\n*\n* @example\n* var num = daysInMonth( 2, 2017 );\n* // returns 28\n*/\nfunction daysInMonth( month, year ) {\n\tvar days;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tdays = DAYS_IN_MONTH[ mon ];\n\tif ( days === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\tif ( days === 28 && isLeapYear( yr ) ) {\n\t\tdays += 1;\n\t}\n\treturn days;\n}\n\n\n// EXPORTS //\n\nexport default daysInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport daysInMonth from './../../days-in-month';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport lowercase from '@stdlib/string/lowercase';\nimport format from '@stdlib/string/format';\nimport MONTHS from './months.json';\nimport DAYS from './days.json';\n\n\n// MAIN //\n\n/**\n* Returns the day of the year.\n*\n* @param {(string|integer|Date)} [month] - month (or Date)\n* @param {integer} [day] - day\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} second argument must be greater than `0` and less than or equal to the maximum number of days in a month\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} day of the year\n*\n* @example\n* var day = dayOfYear();\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( 12, 31, 2017 );\n* // returns 365\n*\n* @example\n* var day = dayOfYear( 12, 31, 2016 );\n* // returns 366\n*/\nfunction dayOfYear( month, day, year ) {\n\tvar date;\n\tvar days;\n\tvar num;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tvar i;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tdate = new Date();\n\t\tmon = date.getMonth() + 1; // zero-based\n\t\tyr = date.getFullYear();\n\t\td = date.getDate();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tdate = month;\n\t\t\tmon = date.getMonth() + 1; // zero-based\n\t\t\tyr = date.getFullYear();\n\t\t\td = date.getDate();\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. If only providing a single argument, must provide a Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( day ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', day ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\td = day;\n\t\tyr = year;\n\t}\n\tdays = daysInMonth( mon, yr );\n\tif ( d < 1 || d > days ) {\n\t\tthrow new RangeError( format( 'invalid argument. Day number must be on the interval: [1, %u]. Value: `%d`.', days, d ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tmon = MONTHS[ mon ];\n\tnum = 0;\n\tfor ( i = 0; i < mon-1; i++ ) {\n\t\tnum += DAYS[ i ];\n\n\t\t// Check for February during a leap year...\n\t\tif ( i === 1 && isLeapYear( yr ) ) {\n\t\t\tnum += 1;\n\t\t}\n\t}\n\tnum += d;\n\treturn num;\n}\n\n\n// EXPORTS //\n\nexport default dayOfYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport lowercase from '@stdlib/string/lowercase';\nimport format from '@stdlib/string/format';\nimport QUARTERS from './quarters.json';\n\n\n// MAIN //\n\n/**\n* Returns the quarter of the year.\n*\n* @param {(integer|string|Date)} [month] - month (or `Date`)\n* @throws {TypeError} must provide either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @returns {integer} quarter of the year\n*\n* @example\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var q = quarterOfYear( 4 );\n* // returns 2\n*\n* @example\n* var q = quarterOfYear( 'June' );\n* // returns 2\n*/\nfunction quarterOfYear( month ) {\n\tvar mon;\n\tvar q;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tmon = month.getMonth() + 1; // zero-based\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tmon = ( new Date() ).getMonth() + 1; // zero-based\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tq = QUARTERS[ mon ];\n\tif ( q === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', month ) );\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nexport default quarterOfYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport dayOfYear from './../../day-of-year';\nimport quarterOfYear from './../../quarter-of-year';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\n// Quarter days:\nvar NON_LEAP_YEAR = [ 0, 90, 181, 273 ];\nvar LEAP_YEAR = [ 0, 91, 182, 274 ];\n\n\n// MAIN //\n\n/**\n* Returns the day of the quarter.\n*\n* @param {(string|integer|Date)} [month] - month (or `Date`)\n* @param {integer} [day] - day\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} second argument must be greater than `0` and less than or equal to the maximum number of days in a month\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} day of the quarter\n*\n* @example\n* var day = dayOfQuarter();\n* // returns <number>\n*\n* day = dayOfQuarter( new Date() );\n* // returns <number>\n*\n* day = dayOfQuarter( 12, 31, 2017 );\n* // returns 92\n*/\nfunction dayOfQuarter( month, day, year ) {\n\tvar date;\n\tvar yr;\n\tvar q;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tdate = new Date();\n\t\tq = quarterOfYear( date );\n\t\td = dayOfYear( date );\n\t\tyr = date.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tdate = month;\n\t\t\tq = quarterOfYear( date );\n\t\t\td = dayOfYear( date );\n\t\t\tyr = date.getFullYear();\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. If only providing a single argument, must provide a Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( day ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', day ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tq = quarterOfYear( month );\n\t\td = dayOfYear( month, day, year );\n\t\tyr = year;\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn d - LEAP_YEAR[ q-1 ];\n\t}\n\treturn d - NON_LEAP_YEAR[ q-1 ];\n}\n\n\n// EXPORTS //\n\nexport default dayOfQuarter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport format from '@stdlib/string/format';\nimport currentYear from './../../current-year';\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 365;\nvar LEAP_YEAR = 366;\n\n\n// MAIN //\n\n/**\n* Returns the number of days in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of days in a year\n*\n* @example\n* var num = daysInYear();\n* // returns <number>\n*\n* @example\n* var num = daysInYear( 2016 );\n* // returns 366\n*\n* @example\n* var num = daysInYear( 2017 );\n* // returns 365\n*/\nfunction daysInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nexport default daysInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDurationString from '@stdlib/assert/is-duration-string';\nimport parseDuration from './../../base/parse-duration';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Converts a duration string to milliseconds.\n*\n* ## Notes\n*\n* -   A duration string is a string containing a sequence of time units. A time unit is a nonnegative integer followed by a unit identifier. The following unit identifiers are supported:\n*\n*     -   `d`: days\n*     -   `h`: hours\n*     -   `m`: minutes\n*     -   `s`: seconds\n*     -   `ms`: milliseconds\n*\n*     For example, the string `1m3s10ms` is a duration string containing three time units: `1m` (1 minute), `3s` (3 seconds), and `10ms` (10 milliseconds). The string `60m` is a duration string containing a single time unit: `60m` (60 minutes).\n*\n* -   Duration strings are case insensitive. For example, the string `1M3S10MS` is equivalent to `1m3s10ms`.\n*\n* @param {string} str - duration string\n* @throws {TypeError} must provide a duration string\n* @returns {NonNegativeInteger} milliseconds\n*\n* @example\n* var ms = duration2ms( '1d' );\n* // returns 86400000\n*\n* @example\n* var ms = duration2ms( '1d2h3m4s5ms' );\n* // returns 93784005\n*/\nfunction duration2ms( str ) {\n\tvar duration;\n\tvar out;\n\n\tif ( !isDurationString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a valid duration string. Value: `%s`.', str ) );\n\t}\n\tduration = parseDuration( str );\n\tout = duration.days * 86400000;\n\tout += duration.hours * 3600000;\n\tout += duration.minutes * 60000;\n\tout += duration.seconds * 1000;\n\tout += duration.milliseconds;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default duration2ms;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport lowercase from '@stdlib/string/lowercase';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport format from '@stdlib/string/format';\nimport HOURS_IN_DAY from '@stdlib/constants/time/hours-in-day';\nimport currentYear from './../../current-year';\nimport HOURS_IN_MONTH from './hours.json';\n\n\n// MAIN //\n\n/**\n* Returns the number of hours in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} hours in a month\n*\n* @example\n* var num = hoursInMonth();\n* // returns <number>\n*\n* @example\n* var num = hoursInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = hoursInMonth( 2, 2016 );\n* // returns 696\n*\n* @example\n* var num = hoursInMonth( 2, 2017 );\n* // returns 672\n*/\nfunction hoursInMonth( month, year ) {\n\tvar hrs;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\thrs = HOURS_IN_MONTH[ mon ];\n\tif ( hrs === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( hrs === 672 && isLeapYear( yr ) ) {\n\t\thrs += HOURS_IN_DAY;\n\t}\n\treturn hrs;\n}\n\n\n// EXPORTS //\n\nexport default hoursInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport format from '@stdlib/string/format';\nimport currentYear from './../../current-year';\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 8760|0; // 365 * 24\nvar LEAP_YEAR = 8784|0; // 366 * 24\n\n\n// MAIN //\n\n/**\n* Returns the number of hours in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of hours in a year\n*\n* @example\n* var num = hoursInYear();\n* // returns <number>\n*\n* @example\n* var num = hoursInYear( 2016 );\n* // returns 8784\n*\n* @example\n* var num = hoursInYear( 2017 );\n* // returns 8760\n*/\nfunction hoursInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nexport default hoursInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport format from '@stdlib/string/format';\nimport floor from '@stdlib/math/base/special/floor';\nimport currentYear from './../../current-year';\n\n\n// VARIABLES //\n\nvar SHORT_YEAR = 52;\nvar LONG_YEAR = 53;\n\n\n// FUNCTIONS //\n\n/**\n* Formula for determining if a year is \"long\" or \"short\".\n*\n* @private\n* @param {integer} yr - year\n* @returns {integer} result\n*/\nfunction p( yr ) {\n\tvar v = yr + floor( yr/4 ) - floor( yr/100 ) + floor( yr/400 );\n\treturn v % 7;\n}\n\n\n// MAIN //\n\n/**\n* Returns the number of ISO weeks in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of ISO weeks in a year\n*\n* @example\n* var num = isoWeeksInYear();\n* // returns <number>\n*\n* @example\n* var num = isoWeeksInYear( 2015 );\n* // returns 53\n*\n* @example\n* var num = isoWeeksInYear( 2017 );\n* // returns 52\n*/\nfunction isoWeeksInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( p( yr ) === 4 || p( yr-1 ) === 3 ) {\n\t\treturn LONG_YEAR;\n\t}\n\treturn SHORT_YEAR;\n}\n\n\n// EXPORTS //\n\nexport default isoWeeksInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport lowercase from '@stdlib/string/lowercase';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport format from '@stdlib/string/format';\nimport MINUTES_IN_DAY from '@stdlib/constants/time/minutes-in-day';\nimport currentYear from './../../current-year';\nimport MINUTES_IN_MONTH from './minutes.json';\n\n\n// MAIN //\n\n/**\n* Returns the number of minutes in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} minutes in a month\n*\n* @example\n* var num = minutesInMonth();\n* // returns <number>\n*\n* @example\n* var num = minutesInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = minutesInMonth( 2, 2016 );\n* // returns 41760\n*\n* @example\n* var num = minutesInMonth( 2, 2017 );\n* // returns 40320\n*/\nfunction minutesInMonth( month, year ) {\n\tvar mins;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tmins = MINUTES_IN_MONTH[ mon ];\n\tif ( mins === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( mins === 40320 && isLeapYear( yr ) ) {\n\t\tmins += MINUTES_IN_DAY;\n\t}\n\treturn mins;\n}\n\n\n// EXPORTS //\n\nexport default minutesInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport currentYear from './../../current-year';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 525600|0; // 365 * 24 * 60\nvar LEAP_YEAR = 527040|0; // 366 * 24 * 60\n\n\n// MAIN //\n\n/**\n* Returns the number of minutes in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of minutes in a year\n*\n* @example\n* var num = minutesInYear();\n* // returns <number>\n*\n* @example\n* var num = minutesInYear( 2016 );\n* // returns 527040\n*\n* @example\n* var num = minutesInYear( 2017 );\n* // returns 525600\n*/\nfunction minutesInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nexport default minutesInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport floor from '@stdlib/math/base/special/floor';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Converts a number of milliseconds to a string duration.\n*\n* @param {number} ms - number of milliseconds\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {string} duration\n*\n* @example\n* var str = ms2duration( 1030 );\n* // returns '1s30ms'\n*\n* @example\n* var str = ms2duration( 3600000 );\n* // returns '1h'\n*/\nfunction ms2duration( ms ) {\n\tvar out;\n\tif ( !isNonNegativeInteger( ms ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', ms ) );\n\t}\n\tif ( ms === 0 ) {\n\t\treturn '0ms';\n\t}\n\tout = '';\n\tif ( ms >= 86400000 ) {\n\t\tout += floor(ms/86400000) + 'd';\n\t\tms %= 86400000;\n\t}\n\tif ( ms >= 3600000 ) {\n\t\tout += floor(ms/3600000) + 'h';\n\t\tms %= 3600000;\n\t}\n\tif ( ms >= 60000 ) {\n\t\tout += floor(ms/60000) + 'm';\n\t\tms %= 60000;\n\t}\n\tif ( ms >= 1000 ) {\n\t\tout += floor(ms/1000) + 's';\n\t\tms %= 1000;\n\t}\n\tif ( ms > 0 ) {\n\t\tout += ms + 'ms';\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default ms2duration;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Time in seconds since the epoch.\n*\n* @module @stdlib/time/now\n*\n* @example\n* import now from '@stdlib/time/now';\n*\n* var ts = now();\n* // returns <number>\n*/\n\n// MODULES //\n\nimport bool from './detect.js';\nimport main from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar now;\nif ( bool ) {\n\tnow = main;\n} else {\n\tnow = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default now;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert/is-function';\n\n\n// MAIN //\n\nvar bool = isFunction( Date.now );\n\n\n// EXPORTS //\n\nexport default bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport round from '@stdlib/math/base/special/round';\n\n\n// MAIN //\n\n/**\n* Returns the time in seconds since the epoch.\n*\n* @returns {integer32} time\n*\n* @example\n* var ts = now();\n* // returns <number>\n*/\nfunction now() {\n\tvar ts = round( Date.now() / 1000 );\n\treturn ts|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default now;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport round from '@stdlib/math/base/special/round';\n\n\n// MAIN //\n\n/**\n* Returns the time in seconds since the epoch.\n*\n* @private\n* @returns {integer32} time\n*\n* @example\n* var ts = now();\n* // returns <number>\n*/\nfunction now() {\n\tvar ts;\n\tvar d;\n\n\td = new Date();\n\tts = round( d.getTime() / 1000 );\n\treturn ts|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nexport default now;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport lowercase from '@stdlib/string/lowercase';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport currentYear from './../../current-year';\nimport format from '@stdlib/string/format';\nimport SECONDS_IN_DAY from '@stdlib/constants/time/seconds-in-day';\nimport SECONDS_IN_MONTH from './seconds.json';\n\n\n// MAIN //\n\n/**\n* Returns the number of seconds in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} seconds in a month\n*\n* @example\n* var num = secondsInMonth();\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2, 2016 );\n* // returns 2505600\n*\n* @example\n* var num = secondsInMonth( 2, 2017 );\n* // returns 2419200\n*/\nfunction secondsInMonth( month, year ) {\n\tvar secs;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tsecs = SECONDS_IN_MONTH[ mon ];\n\tif ( secs === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( secs === 2419200 && isLeapYear( yr ) ) {\n\t\tsecs += SECONDS_IN_DAY;\n\t}\n\treturn secs;\n}\n\n\n// EXPORTS //\n\nexport default secondsInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert/is-date-object';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport isLeapYear from '@stdlib/assert/is-leap-year';\nimport currentYear from './../../current-year';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 31536000|0; // 365 * 86400\nvar LEAP_YEAR = 31622400|0; // 366 * 86400\n\n\n// MAIN //\n\n/**\n* Returns the number of seconds in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of seconds in a year\n*\n* @example\n* var num = secondsInYear();\n* // returns <number>\n*\n* @example\n* var num = secondsInYear( 2016 );\n* // returns 31622400\n*\n* @example\n* var num = secondsInYear( 2017 );\n* // returns 31536000\n*/\nfunction secondsInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nexport default secondsInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar proc = require( 'process' );\n\n\n// MAIN //\n\n/**\n* Returns a high-resolution time.\n*\n* ## Notes\n*\n* -   Output format: `[seconds, nanoseconds]`.\n*\n* @returns {NumberArray} high resolution time\n*\n* @example\n* var t = tic();\n* // returns [<number>,<number>]\n*/\nfunction tic() {\n\treturn proc.hrtime();\n}\n\n\n// EXPORTS //\n\nexport default tic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert/is-nonnegative-integer-array';\nimport format from '@stdlib/string/format';\nimport tic from './../../tic';\n\n\n// MAIN //\n\n/**\n* Returns a high-resolution time difference.\n*\n* ## Notes\n*\n* -   Output format: `[seconds, nanoseconds]`.\n*\n* @param {NonNegativeIntegerArray} time - high-resolution time\n* @throws {TypeError} must provide a nonnegative integer array\n* @throws {RangeError} input array must have length `2`\n* @returns {NumberArray} high resolution time difference\n*\n* @example\n* import tic from '@stdlib/time/tic';\n*\n* var start = tic();\n* var delta = toc( start );\n* // returns [<number>,<number>]\n*/\nfunction toc( time ) {\n\tvar now = tic();\n\tvar sec;\n\tvar ns;\n\tif ( !isNonNegativeIntegerArray( time ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array of nonnegative integers. Value: `%s`.', time ) );\n\t}\n\tif ( time.length !== 2 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Input array must contain two elements. Value: `%s`.', time ) );\n\t}\n\tsec = now[ 0 ] - time[ 0 ];\n\tns = now[ 1 ] - time[ 1 ];\n\tif ( sec > 0 && ns < 0 ) {\n\t\tsec -= 1;\n\t\tns += 1e9;\n\t}\n\telse if ( sec < 0 && ns > 0 ) {\n\t\tsec += 1;\n\t\tns -= 1e9;\n\t}\n\treturn [ sec, ns ];\n}\n\n\n// EXPORTS //\n\nexport default toc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name constants\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/time}\n*/\nimport constants from '@stdlib/constants/time';\nsetReadOnly( ns, 'constants', constants );\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/time/base}\n*/\nimport base from './../base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name currentYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/current-year}\n*/\nimport currentYear from './../current-year';\nsetReadOnly( ns, 'currentYear', currentYear );\n\n/**\n* @name dayOfQuarter\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/day-of-quarter}\n*/\nimport dayOfQuarter from './../day-of-quarter';\nsetReadOnly( ns, 'dayOfQuarter', dayOfQuarter );\n\n/**\n* @name dayOfYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/day-of-year}\n*/\nimport dayOfYear from './../day-of-year';\nsetReadOnly( ns, 'dayOfYear', dayOfYear );\n\n/**\n* @name daysInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/days-in-month}\n*/\nimport daysInMonth from './../days-in-month';\nsetReadOnly( ns, 'daysInMonth', daysInMonth );\n\n/**\n* @name daysInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/days-in-year}\n*/\nimport daysInYear from './../days-in-year';\nsetReadOnly( ns, 'daysInYear', daysInYear );\n\n/**\n* @name duration2ms\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/duration2ms}\n*/\nimport duration2ms from './../duration2ms';\nsetReadOnly( ns, 'duration2ms', duration2ms );\n\n/**\n* @name hoursInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/hours-in-month}\n*/\nimport hoursInMonth from './../hours-in-month';\nsetReadOnly( ns, 'hoursInMonth', hoursInMonth );\n\n/**\n* @name hoursInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/hours-in-year}\n*/\nimport hoursInYear from './../hours-in-year';\nsetReadOnly( ns, 'hoursInYear', hoursInYear );\n\n/**\n* @name isoWeeksInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/iso-weeks-in-year}\n*/\nimport isoWeeksInYear from './../iso-weeks-in-year';\nsetReadOnly( ns, 'isoWeeksInYear', isoWeeksInYear );\n\n/**\n* @name minutesInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/minutes-in-month}\n*/\nimport minutesInMonth from './../minutes-in-month';\nsetReadOnly( ns, 'minutesInMonth', minutesInMonth );\n\n/**\n* @name minutesInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/minutes-in-year}\n*/\nimport minutesInYear from './../minutes-in-year';\nsetReadOnly( ns, 'minutesInYear', minutesInYear );\n\n/**\n* @name ms2duration\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/ms2duration}\n*/\nimport ms2duration from './../ms2duration';\nsetReadOnly( ns, 'ms2duration', ms2duration );\n\n/**\n* @name now\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/now}\n*/\nimport now from './../now';\nsetReadOnly( ns, 'now', now );\n\n/**\n* @name quarterOfYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/quarter-of-year}\n*/\nimport quarterOfYear from './../quarter-of-year';\nsetReadOnly( ns, 'quarterOfYear', quarterOfYear );\n\n/**\n* @name secondsInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/seconds-in-month}\n*/\nimport secondsInMonth from './../seconds-in-month';\nsetReadOnly( ns, 'secondsInMonth', secondsInMonth );\n\n/**\n* @name secondsInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/seconds-in-year}\n*/\nimport secondsInYear from './../seconds-in-year';\nsetReadOnly( ns, 'secondsInYear', secondsInYear );\n\n/**\n* @name tic\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/tic}\n*/\nimport tic from './../tic';\nsetReadOnly( ns, 'tic', tic );\n\n/**\n* @name toc\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/toc}\n*/\nimport toc from './../toc';\nsetReadOnly( ns, 'toc', toc );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["RE_TIME_UNIT","UNITS","d","h","m","s","ms","parseDuration","str","parts","out","u","days","hours","minutes","seconds","milliseconds","length","lowercase","exec","parseInt","ns","currentYear","Date","getFullYear","setReadOnly","daysInMonth","month","year","mon","yr","arguments","getMonth","isDateObject","isString","isInteger","TypeError","format","RangeError","toString","DAYS_IN_MONTH","Error","isLeapYear","dayOfYear","day","date","num","i","getDate","MONTHS","DAYS","quarterOfYear","q","QUARTERS","NON_LEAP_YEAR","LEAP_YEAR","dayOfQuarter","daysInYear","value","duration2ms","duration","isDurationString","hoursInMonth","hrs","HOURS_IN_MONTH","HOURS_IN_DAY","hoursInYear","p","floor","isoWeeksInYear","minutesInMonth","mins","MINUTES_IN_MONTH","MINUTES_IN_DAY","minutesInYear","ms2duration","isNonNegativeInteger","now$1","isFunction","now","round","getTime","secondsInMonth","secs","SECONDS_IN_MONTH","SECONDS_IN_DAY","secondsInYear","proc","tic","hrtime","toc","time","sec","isNonNegativeIntegerArray","constants","base"],"mappings":"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"}