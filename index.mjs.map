{"version":3,"file":"index.mjs","sources":["../base/lib/index.js","../base/parse-duration/lib/index.js","../base/parse-duration/lib/main.js","../current-year/lib/main.js","../current-year/lib/index.js","../days-in-month/lib/main.js","../days-in-month/lib/index.js","../day-of-year/lib/main.js","../day-of-year/lib/index.js","../quarter-of-year/lib/main.js","../quarter-of-year/lib/index.js","../day-of-quarter/lib/main.js","../day-of-quarter/lib/index.js","../days-in-year/lib/main.js","../days-in-year/lib/index.js","../hours-in-month/lib/main.js","../hours-in-month/lib/index.js","../hours-in-year/lib/main.js","../hours-in-year/lib/index.js","../iso-weeks-in-year/lib/main.js","../iso-weeks-in-year/lib/index.js","../minutes-in-month/lib/main.js","../minutes-in-month/lib/index.js","../minutes-in-year/lib/main.js","../minutes-in-year/lib/index.js","../now/lib/detect.js","../now/lib/main.js","../now/lib/polyfill.js","../now/lib/index.js","../seconds-in-month/lib/main.js","../seconds-in-month/lib/index.js","../seconds-in-year/lib/main.js","../seconds-in-year/lib/index.js","../tic/lib/main.js","../tic/lib/index.js","../toc/lib/main.js","../toc/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name parseDuration\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/base/parse-duration}\n*/\nsetReadOnly( ns, 'parseDuration', require( './../../base/parse-duration' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Parse a duration string into an object.\n*\n* @module @stdlib/time/base/parse-duration\n*\n* @example\n* var parseDuration = require( '@stdlib/time/base/parse-duration' );\n*\n* var obj = parseDuration( '1m3s10ms' );\n* // returns { 'days': 0, 'hours': 0, 'minutes': 1, 'seconds': 3, 'milliseconds': 10 }\n*\n* obj = parseDuration( '1d3h' );\n* // returns { 'days': 1, 'hours': 3, 'minutes': 9, 'seconds': 0, 'milliseconds': 0 }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lowercase = require( '@stdlib/string/base/lowercase' );\n\n\n// VARIABLES //\n\nvar RE_TIME_UNIT = /(\\d+)([a-z]+)/gi;\nvar UNITS = {\n\t'd': 'days',\n\t'h': 'hours',\n\t'm': 'minutes',\n\t's': 'seconds',\n\t'ms': 'milliseconds'\n};\n\n\n// MAIN //\n\n/**\n* Parses a duration string into an object.\n*\n* ## Notes\n*\n* -   A duration string is a string containing a sequence of time units. A time unit is a nonnegative integer followed by a unit identifier. The following unit identifiers are supported:\n*\n*     -   `d`: days\n*     -   `h`: hours\n*     -   `m`: minutes\n*     -   `s`: seconds\n*     -   `ms`: milliseconds\n*\n*     For example, the string `1m3s10ms` is a duration string containing three time units: `1m` (1 minute), `3s` (3 seconds), and `10ms` (10 milliseconds). The string `60m` is a duration string containing a single time unit: `60m` (60 minutes).\n*\n* -   Duration strings are case insensitive. For example, the string `1M3S10MS` is equivalent to `1m3s10ms`.\n*\n* -   If a duration string does not contain a time unit, the respective property is set to `0`.\n*\n* -   An empty string is considered a valid duration string and is parsed as `0d0h0m0s0ms`.\n*\n* @param {string} str - duration string\n* @returns {Object} duration object\n*\n* @example\n* var obj = parseDuration( '1m3s10ms' );\n* // returns { 'days': 0, 'hours': 0, 'minutes': 1, 'seconds': 3, 'milliseconds': 10 }\n*\n* @example\n* var obj = parseDuration( '1m3s' );\n* // returns { 'days': 0, 'hours': 0, 'minutes': 1, 'seconds': 3, 'milliseconds': 0 }\n*/\nfunction parseDuration( str ) {\n\tvar parts;\n\tvar out;\n\tvar u;\n\n\tout = {\n\t\t'days': 0,\n\t\t'hours': 0,\n\t\t'minutes': 0,\n\t\t'seconds': 0,\n\t\t'milliseconds': 0\n\t};\n\tif ( str.length === 0 ) {\n\t\treturn out;\n\t}\n\tstr = lowercase( str );\n\tparts = RE_TIME_UNIT.exec( str );\n\twhile ( parts ) {\n\t\tu = UNITS[ parts[ 2 ] ];\n\t\tif ( u ) {\n\t\t\tout[ u ] = parseInt( parts[ 1 ], 10 );\n\t\t}\n\t\tparts = RE_TIME_UNIT.exec( str );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = parseDuration;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the current year.\n*\n* @returns {integer} current year\n*\n* @example\n* var y = currentYear();\n* // returns <number>\n*/\nfunction currentYear() {\n\treturn (new Date()).getFullYear();\n}\n\n\n// EXPORTS //\n\nmodule.exports = currentYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Current year.\n*\n* @module @stdlib/time/current-year\n*\n* @example\n* var currentYear = require( '@stdlib/time/current-year' );\n*\n* var y = currentYear();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar currentYear = require( './../../current-year' );\nvar DAYS_IN_MONTH = require( './days.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of days in a month.\n*\n* @param {(string|Date|integer)} [month] - month (or Date)\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} days in a month\n*\n* @example\n* var num = daysInMonth();\n* // returns <number>\n*\n* @example\n* var num = daysInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = daysInMonth( 2, 2016 );\n* // returns 29\n*\n* @example\n* var num = daysInMonth( 2, 2017 );\n* // returns 28\n*/\nfunction daysInMonth( month, year ) {\n\tvar days;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tdays = DAYS_IN_MONTH[ mon ];\n\tif ( days === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\tif ( days === 28 && isLeapYear( yr ) ) {\n\t\tdays += 1;\n\t}\n\treturn days;\n}\n\n\n// EXPORTS //\n\nmodule.exports = daysInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of days in a month.\n*\n* @module @stdlib/time/days-in-month\n*\n* @example\n* var daysInMonth = require( '@stdlib/time/days-in-month' );\n*\n* var num = daysInMonth();\n* // returns <number>\n*\n* num = daysInMonth( 2 );\n* // returns <number>\n*\n* num = daysInMonth( 2, 2016 );\n* // returns 29\n*\n* num = daysInMonth( 2, 2017 );\n* // returns 28\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar daysInMonth = require( './../../days-in-month' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar format = require( '@stdlib/string/format' );\nvar MONTHS = require( './months.json' );\nvar DAYS = require( './days.json' );\n\n\n// MAIN //\n\n/**\n* Returns the day of the year.\n*\n* @param {(string|integer|Date)} [month] - month (or Date)\n* @param {integer} [day] - day\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} second argument must be greater than `0` and less than or equal to the maximum number of days in a month\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} day of the year\n*\n* @example\n* var day = dayOfYear();\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( 12, 31, 2017 );\n* // returns 365\n*\n* @example\n* var day = dayOfYear( 12, 31, 2016 );\n* // returns 366\n*/\nfunction dayOfYear( month, day, year ) {\n\tvar date;\n\tvar days;\n\tvar num;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tvar i;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tdate = new Date();\n\t\tmon = date.getMonth() + 1; // zero-based\n\t\tyr = date.getFullYear();\n\t\td = date.getDate();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tdate = month;\n\t\t\tmon = date.getMonth() + 1; // zero-based\n\t\t\tyr = date.getFullYear();\n\t\t\td = date.getDate();\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. If only providing a single argument, must provide a Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( day ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', day ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\td = day;\n\t\tyr = year;\n\t}\n\tdays = daysInMonth( mon, yr );\n\tif ( d < 1 || d > days ) {\n\t\tthrow new RangeError( format( 'invalid argument. Day number must be on the interval: [1, %u]. Value: `%d`.', days, d ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tmon = MONTHS[ mon ];\n\tnum = 0;\n\tfor ( i = 0; i < mon-1; i++ ) {\n\t\tnum += DAYS[ i ];\n\n\t\t// Check for February during a leap year...\n\t\tif ( i === 1 && isLeapYear( yr ) ) {\n\t\t\tnum += 1;\n\t\t}\n\t}\n\tnum += d;\n\treturn num;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dayOfYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the day of the year.\n*\n* @module @stdlib/time/day-of-year\n*\n* @example\n* var dayOfYear = require( '@stdlib/time/day-of-year' );\n*\n* var day = dayOfYear();\n* // returns <number>\n*\n* day = dayOfYear( new Date() );\n* // returns <number>\n*\n* day = dayOfYear( 12, 31, 2017 );\n* // returns 365\n*\n* day = dayOfYear( 12, 31, 2016 );\n* // returns 366\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar format = require( '@stdlib/string/format' );\nvar QUARTERS = require( './quarters.json' );\n\n\n// MAIN //\n\n/**\n* Returns the quarter of the year.\n*\n* @param {(integer|string|Date)} [month] - month (or `Date`)\n* @throws {TypeError} must provide either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @returns {integer} quarter of the year\n*\n* @example\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var q = quarterOfYear( 4 );\n* // returns 2\n*\n* @example\n* var q = quarterOfYear( 'June' );\n* // returns 2\n*/\nfunction quarterOfYear( month ) {\n\tvar mon;\n\tvar q;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tmon = month.getMonth() + 1; // zero-based\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tmon = ( new Date() ).getMonth() + 1; // zero-based\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tq = QUARTERS[ mon ];\n\tif ( q === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', month ) );\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nmodule.exports = quarterOfYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the quarter of the year.\n*\n* @module @stdlib/time/quarter-of-year\n*\n* @example\n* var quarterOfYear = require( '@stdlib/time/quarter-of-year' );\n*\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* q = quarterOfYear( 4 );\n* // returns 2\n*\n* q = quarterOfYear( 'June' );\n* // returns 2\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar dayOfYear = require( './../../day-of-year' );\nvar quarterOfYear = require( './../../quarter-of-year' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\n// Quarter days:\nvar NON_LEAP_YEAR = [ 0, 90, 181, 273 ];\nvar LEAP_YEAR = [ 0, 91, 182, 274 ];\n\n\n// MAIN //\n\n/**\n* Returns the day of the quarter.\n*\n* @param {(string|integer|Date)} [month] - month (or `Date`)\n* @param {integer} [day] - day\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} second argument must be greater than `0` and less than or equal to the maximum number of days in a month\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} day of the quarter\n*\n* @example\n* var day = dayOfQuarter();\n* // returns <number>\n*\n* day = dayOfQuarter( new Date() );\n* // returns <number>\n*\n* day = dayOfQuarter( 12, 31, 2017 );\n* // returns 92\n*/\nfunction dayOfQuarter( month, day, year ) {\n\tvar date;\n\tvar yr;\n\tvar q;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tdate = new Date();\n\t\tq = quarterOfYear( date );\n\t\td = dayOfYear( date );\n\t\tyr = date.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tdate = month;\n\t\t\tq = quarterOfYear( date );\n\t\t\td = dayOfYear( date );\n\t\t\tyr = date.getFullYear();\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. If only providing a single argument, must provide a Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( day ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', day ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tq = quarterOfYear( month );\n\t\td = dayOfYear( month, day, year );\n\t\tyr = year;\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn d - LEAP_YEAR[ q-1 ];\n\t}\n\treturn d - NON_LEAP_YEAR[ q-1 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = dayOfQuarter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the day of the quarter.\n*\n* @module @stdlib/time/day-of-quarter\n*\n* @example\n* var dayOfQuarter = require( '@stdlib/time/day-of-quarter' );\n*\n* var day = dayOfQuarter();\n* // returns <number>\n*\n* day = dayOfQuarter( new Date() );\n* // returns <number>\n*\n* day = dayOfQuarter( 12, 31, 2017 );\n* // returns 92\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar currentYear = require( './../../current-year' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 365;\nvar LEAP_YEAR = 366;\n\n\n// MAIN //\n\n/**\n* Returns the number of days in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of days in a year\n*\n* @example\n* var num = daysInYear();\n* // returns <number>\n*\n* @example\n* var num = daysInYear( 2016 );\n* // returns 366\n*\n* @example\n* var num = daysInYear( 2017 );\n* // returns 365\n*/\nfunction daysInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = daysInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of days in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/days-in-year\n*\n* @example\n* var daysInYear = require( '@stdlib/time/days-in-year' );\n*\n* var num = daysInYear();\n* // returns <number>\n*\n* num = daysInYear( 2016 );\n* // returns 366\n*\n* num = daysInYear( 2017 );\n* // returns 365\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar HOURS_IN_DAY = require( '@stdlib/constants/time/hours-in-day' );\nvar currentYear = require( './../../current-year' );\nvar HOURS_IN_MONTH = require( './hours.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of hours in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} hours in a month\n*\n* @example\n* var num = hoursInMonth();\n* // returns <number>\n*\n* @example\n* var num = hoursInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = hoursInMonth( 2, 2016 );\n* // returns 696\n*\n* @example\n* var num = hoursInMonth( 2, 2017 );\n* // returns 672\n*/\nfunction hoursInMonth( month, year ) {\n\tvar hrs;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\thrs = HOURS_IN_MONTH[ mon ];\n\tif ( hrs === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( hrs === 672 && isLeapYear( yr ) ) {\n\t\thrs += HOURS_IN_DAY;\n\t}\n\treturn hrs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hoursInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of hours in a month.\n*\n* @module @stdlib/time/hours-in-month\n*\n* @example\n* var hoursInMonth = require( '@stdlib/time/hours-in-month' );\n*\n* var num = hoursInMonth();\n* // returns <number>\n*\n* num = hoursInMonth( 2 );\n* // returns <number>\n*\n* num = hoursInMonth( 2, 2016 );\n* // returns 696\n*\n* num = hoursInMonth( 2, 2017 );\n* // returns 672\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar currentYear = require( './../../current-year' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 8760|0; // 365 * 24\nvar LEAP_YEAR = 8784|0; // 366 * 24\n\n\n// MAIN //\n\n/**\n* Returns the number of hours in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of hours in a year\n*\n* @example\n* var num = hoursInYear();\n* // returns <number>\n*\n* @example\n* var num = hoursInYear( 2016 );\n* // returns 8784\n*\n* @example\n* var num = hoursInYear( 2017 );\n* // returns 8760\n*/\nfunction hoursInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hoursInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of hours in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/hours-in-year\n*\n* @example\n* var hoursInYear = require( '@stdlib/time/hours-in-year' );\n*\n* var num = hoursInYear();\n* // returns <number>\n*\n* num = hoursInYear( 2016 );\n* // returns 8784\n*\n* num = hoursInYear( 2017 );\n* // returns 8760\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar currentYear = require( './../../current-year' );\n\n\n// VARIABLES //\n\nvar SHORT_YEAR = 52;\nvar LONG_YEAR = 53;\n\n\n// FUNCTIONS //\n\n/**\n* Formula for determining if a year is \"long\" or \"short\".\n*\n* @private\n* @param {integer} yr - year\n* @returns {integer} result\n*/\nfunction p( yr ) {\n\tvar v = yr + floor( yr/4 ) - floor( yr/100 ) + floor( yr/400 );\n\treturn v % 7;\n}\n\n\n// MAIN //\n\n/**\n* Returns the number of ISO weeks in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of ISO weeks in a year\n*\n* @example\n* var num = isoWeeksInYear();\n* // returns <number>\n*\n* @example\n* var num = isoWeeksInYear( 2015 );\n* // returns 53\n*\n* @example\n* var num = isoWeeksInYear( 2017 );\n* // returns 52\n*/\nfunction isoWeeksInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( p( yr ) === 4 || p( yr-1 ) === 3 ) {\n\t\treturn LONG_YEAR;\n\t}\n\treturn SHORT_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isoWeeksInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of ISO weeks in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/iso-weeks-in-year\n*\n* @example\n* var isoWeeksInYear = require( '@stdlib/time/iso-weeks-in-year' );\n*\n* var num = isoWeeksInYear();\n* // returns <number>\n*\n* num = isoWeeksInYear( 2015 );\n* // returns 53\n*\n* num = isoWeeksInYear( 2017 );\n* // returns 52\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar MINUTES_IN_DAY = require( '@stdlib/constants/time/minutes-in-day' );\nvar currentYear = require( './../../current-year' );\nvar MINUTES_IN_MONTH = require( './minutes.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of minutes in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} minutes in a month\n*\n* @example\n* var num = minutesInMonth();\n* // returns <number>\n*\n* @example\n* var num = minutesInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = minutesInMonth( 2, 2016 );\n* // returns 41760\n*\n* @example\n* var num = minutesInMonth( 2, 2017 );\n* // returns 40320\n*/\nfunction minutesInMonth( month, year ) {\n\tvar mins;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tmins = MINUTES_IN_MONTH[ mon ];\n\tif ( mins === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( mins === 40320 && isLeapYear( yr ) ) {\n\t\tmins += MINUTES_IN_DAY;\n\t}\n\treturn mins;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minutesInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of minutes in a month.\n*\n* @module @stdlib/time/minutes-in-month\n*\n* @example\n* var minutesInMonth = require( '@stdlib/time/minutes-in-month' );\n*\n* var num = minutesInMonth();\n* // returns <number>\n*\n* num = minutesInMonth( 2 );\n* // returns <number>\n*\n* num = minutesInMonth( 2, 2016 );\n* // returns 41760\n*\n* num = minutesInMonth( 2, 2017 );\n* // returns 40320\n*/\n\n// MODULES //\n\nvar minutesInMonth = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = minutesInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar currentYear = require( './../../current-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 525600|0; // 365 * 24 * 60\nvar LEAP_YEAR = 527040|0; // 366 * 24 * 60\n\n\n// MAIN //\n\n/**\n* Returns the number of minutes in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of minutes in a year\n*\n* @example\n* var num = minutesInYear();\n* // returns <number>\n*\n* @example\n* var num = minutesInYear( 2016 );\n* // returns 527040\n*\n* @example\n* var num = minutesInYear( 2017 );\n* // returns 525600\n*/\nfunction minutesInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minutesInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of minutes in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/minutes-in-year\n*\n* @example\n* var minutesInYear = require( '@stdlib/time/minutes-in-year' );\n*\n* var num = minutesInYear();\n* // returns <number>\n*\n* num = minutesInYear( 2016 );\n* // returns 527040\n*\n* num = minutesInYear( 2017 );\n* // returns 525600\n*/\n\n// MODULES //\n\nvar minutesInYear = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = minutesInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\n\n\n// MAIN //\n\nvar bool = isFunction( Date.now );\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar round = require( '@stdlib/math/base/special/round' );\n\n\n// MAIN //\n\n/**\n* Returns the time in seconds since the epoch.\n*\n* @returns {integer32} time\n*\n* @example\n* var ts = now();\n* // returns <number>\n*/\nfunction now() {\n\tvar ts = round( Date.now() / 1000 );\n\treturn ts|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = now;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar round = require( '@stdlib/math/base/special/round' );\n\n\n// MAIN //\n\n/**\n* Returns the time in seconds since the epoch.\n*\n* @private\n* @returns {integer32} time\n*\n* @example\n* var ts = now();\n* // returns <number>\n*/\nfunction now() {\n\tvar ts;\n\tvar d;\n\n\td = new Date();\n\tts = round( d.getTime() / 1000 );\n\treturn ts|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = now;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Time in seconds since the epoch.\n*\n* @module @stdlib/time/now\n*\n* @example\n* var now = require( '@stdlib/time/now' );\n*\n* var ts = now();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar bool = require( './detect.js' );\nvar main = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar now;\nif ( bool ) {\n\tnow = main;\n} else {\n\tnow = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = now;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar currentYear = require( './../../current-year' );\nvar format = require( '@stdlib/string/format' );\nvar SECONDS_IN_DAY = require( '@stdlib/constants/time/seconds-in-day' );\nvar SECONDS_IN_MONTH = require( './seconds.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of seconds in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} seconds in a month\n*\n* @example\n* var num = secondsInMonth();\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2, 2016 );\n* // returns 2505600\n*\n* @example\n* var num = secondsInMonth( 2, 2017 );\n* // returns 2419200\n*/\nfunction secondsInMonth( month, year ) {\n\tvar secs;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tsecs = SECONDS_IN_MONTH[ mon ];\n\tif ( secs === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( secs === 2419200 && isLeapYear( yr ) ) {\n\t\tsecs += SECONDS_IN_DAY;\n\t}\n\treturn secs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = secondsInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of seconds in a month.\n*\n* @module @stdlib/time/seconds-in-month\n*\n* @example\n* var secondsInMonth = require( '@stdlib/time/seconds-in-month' );\n*\n* var num = secondsInMonth();\n* // returns <number>\n*\n* num = secondsInMonth( 2 );\n* // returns <number>\n*\n* num = secondsInMonth( 2, 2016 );\n* // returns 2505600\n*\n* num = secondsInMonth( 2, 2017 );\n* // returns 2419200\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar currentYear = require( './../../current-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 31536000|0; // 365 * 86400\nvar LEAP_YEAR = 31622400|0; // 366 * 86400\n\n\n// MAIN //\n\n/**\n* Returns the number of seconds in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of seconds in a year\n*\n* @example\n* var num = secondsInYear();\n* // returns <number>\n*\n* @example\n* var num = secondsInYear( 2016 );\n* // returns 31622400\n*\n* @example\n* var num = secondsInYear( 2017 );\n* // returns 31536000\n*/\nfunction secondsInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = currentYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = secondsInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of seconds in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/seconds-in-year\n*\n* @example\n* var secondsInYear = require( '@stdlib/time/seconds-in-year' );\n*\n* var num = secondsInYear();\n* // returns <number>\n*\n* num = secondsInYear( 2016 );\n* // returns 31622400\n*\n* num = secondsInYear( 2017 );\n* // returns 31536000\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar proc = require( 'process' );\n\n\n// MAIN //\n\n/**\n* Returns a high-resolution time.\n*\n* ## Notes\n*\n* -   Output format: `[seconds, nanoseconds]`.\n*\n*\n* @returns {NumberArray} high resolution time\n*\n* @example\n* var t = tic();\n* // returns [<number>,<number>]\n*/\nfunction tic() {\n\treturn proc.hrtime();\n}\n\n\n// EXPORTS //\n\nmodule.exports = tic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a high-resolution time.\n*\n* @module @stdlib/time/tic\n*\n* @example\n* var tic = require( '@stdlib/time/tic' );\n*\n* var t = tic();\n* // returns [<number>,<number>]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;\nvar format = require( '@stdlib/string/format' );\nvar tic = require( './../../tic' );\n\n\n// MAIN //\n\n/**\n* Returns a high-resolution time difference.\n*\n* ## Notes\n*\n* -   Output format: `[seconds, nanoseconds]`.\n*\n*\n* @param {NonNegativeIntegerArray} time - high-resolution time\n* @throws {TypeError} must provide a nonnegative integer array\n* @throws {RangeError} input array must have length `2`\n* @returns {NumberArray} high resolution time difference\n*\n* @example\n* var tic = require( '@stdlib/time/tic' );\n*\n* var start = tic();\n* var delta = toc( start );\n* // returns [<number>,<number>]\n*/\nfunction toc( time ) {\n\tvar now = tic();\n\tvar sec;\n\tvar ns;\n\tif ( !isNonNegativeIntegerArray( time ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array of nonnegative integers. Value: `%s`.', time ) );\n\t}\n\tif ( time.length !== 2 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Input array must contain two elements. Value: `%s`.', time ) );\n\t}\n\tsec = now[ 0 ] - time[ 0 ];\n\tns = now[ 1 ] - time[ 1 ];\n\tif ( sec > 0 && ns < 0 ) {\n\t\tsec -= 1;\n\t\tns += 1e9;\n\t}\n\telse if ( sec < 0 && ns > 0 ) {\n\t\tsec += 1;\n\t\tns -= 1e9;\n\t}\n\treturn [ sec, ns ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = toc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a high-resolution time difference.\n*\n* @module @stdlib/time/toc\n*\n* @example\n* var tic = require( '@stdlib/time/tic' );\n* var toc = require( '@stdlib/time/toc' );\n*\n* var start = tic();\n* var delta = toc( start );\n* // returns [<number>,<number>]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name constants\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/time}\n*/\nimport constants from '@stdlib/constants/time';\nsetReadOnly( ns, 'constants', constants );\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/time/base}\n*/\nimport base from './../base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name currentYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/current-year}\n*/\nimport currentYear from './../current-year';\nsetReadOnly( ns, 'currentYear', currentYear );\n\n/**\n* @name dayOfQuarter\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/day-of-quarter}\n*/\nimport dayOfQuarter from './../day-of-quarter';\nsetReadOnly( ns, 'dayOfQuarter', dayOfQuarter );\n\n/**\n* @name dayOfYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/day-of-year}\n*/\nimport dayOfYear from './../day-of-year';\nsetReadOnly( ns, 'dayOfYear', dayOfYear );\n\n/**\n* @name daysInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/days-in-month}\n*/\nimport daysInMonth from './../days-in-month';\nsetReadOnly( ns, 'daysInMonth', daysInMonth );\n\n/**\n* @name daysInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/days-in-year}\n*/\nimport daysInYear from './../days-in-year';\nsetReadOnly( ns, 'daysInYear', daysInYear );\n\n/**\n* @name hoursInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/hours-in-month}\n*/\nimport hoursInMonth from './../hours-in-month';\nsetReadOnly( ns, 'hoursInMonth', hoursInMonth );\n\n/**\n* @name hoursInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/hours-in-year}\n*/\nimport hoursInYear from './../hours-in-year';\nsetReadOnly( ns, 'hoursInYear', hoursInYear );\n\n/**\n* @name isoWeeksInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/iso-weeks-in-year}\n*/\nimport isoWeeksInYear from './../iso-weeks-in-year';\nsetReadOnly( ns, 'isoWeeksInYear', isoWeeksInYear );\n\n/**\n* @name minutesInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/minutes-in-month}\n*/\nimport minutesInMonth from './../minutes-in-month';\nsetReadOnly( ns, 'minutesInMonth', minutesInMonth );\n\n/**\n* @name minutesInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/minutes-in-year}\n*/\nimport minutesInYear from './../minutes-in-year';\nsetReadOnly( ns, 'minutesInYear', minutesInYear );\n\n/**\n* @name now\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/now}\n*/\nimport now from './../now';\nsetReadOnly( ns, 'now', now );\n\n/**\n* @name quarterOfYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/quarter-of-year}\n*/\nimport quarterOfYear from './../quarter-of-year';\nsetReadOnly( ns, 'quarterOfYear', quarterOfYear );\n\n/**\n* @name secondsInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/seconds-in-month}\n*/\nimport secondsInMonth from './../seconds-in-month';\nsetReadOnly( ns, 'secondsInMonth', secondsInMonth );\n\n/**\n* @name secondsInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/seconds-in-year}\n*/\nimport secondsInYear from './../seconds-in-year';\nsetReadOnly( ns, 'secondsInYear', secondsInYear );\n\n/**\n* @name tic\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/tic}\n*/\nimport tic from './../tic';\nsetReadOnly( ns, 'tic', tic );\n\n/**\n* @name toc\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/toc}\n*/\nimport toc from './../toc';\nsetReadOnly( ns, 'toc', toc );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["ns","require$$0","main","lowercase","RE_TIME_UNIT","UNITS","d","h","m","s","ms","str","parts","out","u","days","hours","minutes","seconds","milliseconds","length","exec","parseInt","lib","require$$1","Date","getFullYear","isDateObject","isString","isPrimitive","isInteger","require$$2","require$$3","isLeapYear","require$$4","format","require$$5","currentYear","require$$6","DAYS_IN_MONTH","require$$7","month","year","mon","yr","arguments","getMonth","TypeError","RangeError","toString","Error","daysInMonth","MONTHS","DAYS","day","date","num","i","getDate","QUARTERS","q","dayOfYear","quarterOfYear","NON_LEAP_YEAR","LEAP_YEAR","value","HOURS_IN_DAY","HOURS_IN_MONTH","require$$8","hrs","floor","p","MINUTES_IN_DAY","MINUTES_IN_MONTH","mins","bool","now","round","getTime","SECONDS_IN_DAY","SECONDS_IN_MONTH","secs","proc","hrtime","isNonNegativeIntegerArray","primitives","tic","time","sec","setReadOnly","constants","base","dayOfQuarter","daysInYear","hoursInMonth","hoursInYear","isoWeeksInYear","minutesInMonth","minutesInYear","secondsInMonth","secondsInYear","toc"],"mappings":"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"}