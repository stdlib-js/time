{"version":3,"file":"index.mjs","sources":["../days-in-month/lib/days_in_month.js","../days-in-month/lib/index.js","../day-of-year/lib/day_of_year.js","../day-of-year/lib/index.js","../quarter-of-year/lib/quarter_of_year.js","../quarter-of-year/lib/index.js","../day-of-quarter/lib/day_of_quarter.js","../day-of-quarter/lib/index.js","../days-in-year/lib/days_in_year.js","../days-in-year/lib/index.js","../hours-in-month/lib/hours_in_month.js","../hours-in-month/lib/index.js","../hours-in-year/lib/hours_in_year.js","../hours-in-year/lib/index.js","../iso-weeks-in-year/lib/iso_weeks_in_year.js","../iso-weeks-in-year/lib/index.js","../minutes-in-month/lib/minutes_in_month.js","../minutes-in-month/lib/index.js","../minutes-in-year/lib/minutes_in_year.js","../minutes-in-year/lib/index.js","../now/lib/detect.js","../now/lib/now.js","../now/lib/polyfill.js","../now/lib/index.js","../seconds-in-month/lib/seconds_in_month.js","../seconds-in-month/lib/index.js","../seconds-in-year/lib/seconds_in_year.js","../seconds-in-year/lib/index.js","../tic/lib/main.js","../tic/lib/index.js","../toc/lib/toc.js","../toc/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar DAYS_IN_MONTH = require( './days.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of days in a month.\n*\n* @param {(string|Date|integer)} [month] - month (or Date)\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} days in a month\n*\n* @example\n* var num = daysInMonth();\n* // returns <number>\n*\n* @example\n* var num = daysInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = daysInMonth( 2, 2016 );\n* // returns 29\n*\n* @example\n* var num = daysInMonth( 2, 2017 );\n* // returns 28\n*/\nfunction daysInMonth( month, year ) {\n\tvar days;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = ( new Date() ).getFullYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tdays = DAYS_IN_MONTH[ mon ];\n\tif ( days === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\tif ( days === 28 && isLeapYear( yr ) ) {\n\t\tdays += 1;\n\t}\n\treturn days;\n}\n\n\n// EXPORTS //\n\nmodule.exports = daysInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of days in a month.\n*\n* @module @stdlib/time/days-in-month\n*\n* @example\n* var daysInMonth = require( '@stdlib/time/days-in-month' );\n*\n* var num = daysInMonth();\n* // returns <number>\n*\n* num = daysInMonth( 2 );\n* // returns <number>\n*\n* num = daysInMonth( 2, 2016 );\n* // returns 29\n*\n* num = daysInMonth( 2, 2017 );\n* // returns 28\n*/\n\n// MODULES //\n\nvar daysInMonth = require( './days_in_month.js' );\n\n\n// EXPORTS //\n\nmodule.exports = daysInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar daysInMonth = require( './../../days-in-month' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar format = require( '@stdlib/string/format' );\nvar MONTHS = require( './months.json' );\nvar DAYS = require( './days.json' );\n\n\n// MAIN //\n\n/**\n* Returns the day of the year.\n*\n* @param {(string|integer|Date)} [month] - month (or Date)\n* @param {integer} [day] - day\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} second argument must be greater than `0` and less than or equal to the maximum number of days in a month\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} day of the year\n*\n* @example\n* var day = dayOfYear();\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var day = dayOfYear( 12, 31, 2017 );\n* // returns 365\n*\n* @example\n* var day = dayOfYear( 12, 31, 2016 );\n* // returns 366\n*/\nfunction dayOfYear( month, day, year ) {\n\tvar date;\n\tvar days;\n\tvar num;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tvar i;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tdate = new Date();\n\t\tmon = date.getMonth() + 1; // zero-based\n\t\tyr = date.getFullYear();\n\t\td = date.getDate();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tdate = month;\n\t\t\tmon = date.getMonth() + 1; // zero-based\n\t\t\tyr = date.getFullYear();\n\t\t\td = date.getDate();\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. If only providing a single argument, must provide a Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( day ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', day ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\td = day;\n\t\tyr = year;\n\t}\n\tdays = daysInMonth( mon, yr );\n\tif ( d < 1 || d > days ) {\n\t\tthrow new RangeError( format( 'invalid argument. Day number must be on the interval: [1, %u]. Value: `%d`.', days, d ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tmon = MONTHS[ mon ];\n\tnum = 0;\n\tfor ( i = 0; i < mon-1; i++ ) {\n\t\tnum += DAYS[ i ];\n\n\t\t// Check for February during a leap year...\n\t\tif ( i === 1 && isLeapYear( yr ) ) {\n\t\t\tnum += 1;\n\t\t}\n\t}\n\tnum += d;\n\treturn num;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dayOfYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the day of the year.\n*\n* @module @stdlib/time/day-of-year\n*\n* @example\n* var dayOfYear = require( '@stdlib/time/day-of-year' );\n*\n* var day = dayOfYear();\n* // returns <number>\n*\n* day = dayOfYear( new Date() );\n* // returns <number>\n*\n* day = dayOfYear( 12, 31, 2017 );\n* // returns 365\n*\n* day = dayOfYear( 12, 31, 2016 );\n* // returns 366\n*/\n\n// MODULES //\n\nvar dayOfYear = require( './day_of_year.js' );\n\n\n// EXPORTS //\n\nmodule.exports = dayOfYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar format = require( '@stdlib/string/format' );\nvar QUARTERS = require( './quarters.json' );\n\n\n// MAIN //\n\n/**\n* Returns the quarter of the year.\n*\n* @param {(integer|string|Date)} [month] - month (or `Date`)\n* @throws {TypeError} must provide either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @returns {integer} quarter of the year\n*\n* @example\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var q = quarterOfYear( 4 );\n* // returns 2\n*\n* @example\n* var q = quarterOfYear( 'June' );\n* // returns 2\n*/\nfunction quarterOfYear( month ) {\n\tvar mon;\n\tvar q;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tmon = month.getMonth() + 1; // zero-based\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tmon = ( new Date() ).getMonth() + 1; // zero-based\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tq = QUARTERS[ mon ];\n\tif ( q === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', month ) );\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nmodule.exports = quarterOfYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the quarter of the year.\n*\n* @module @stdlib/time/quarter-of-year\n*\n* @example\n* var quarterOfYear = require( '@stdlib/time/quarter-of-year' );\n*\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* q = quarterOfYear( 4 );\n* // returns 2\n*\n* q = quarterOfYear( 'June' );\n* // returns 2\n*/\n\n// MODULES //\n\nvar quarterOfYear = require( './quarter_of_year.js' );\n\n\n// EXPORTS //\n\nmodule.exports = quarterOfYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar dayOfYear = require( './../../day-of-year' );\nvar quarterOfYear = require( './../../quarter-of-year' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\n// Quarter days:\nvar NON_LEAP_YEAR = [ 0, 90, 181, 273 ];\nvar LEAP_YEAR = [ 0, 91, 182, 274 ];\n\n\n// MAIN //\n\n/**\n* Returns the day of the quarter.\n*\n* @param {(string|integer|Date)} [month] - month (or `Date`)\n* @param {integer} [day] - day\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} second argument must be greater than `0` and less than or equal to the maximum number of days in a month\n* @throws {TypeError} third argument must be an integer\n* @returns {integer} day of the quarter\n*\n* @example\n* var day = dayOfQuarter();\n* // returns <number>\n*\n* day = dayOfQuarter( new Date() );\n* // returns <number>\n*\n* day = dayOfQuarter( 12, 31, 2017 );\n* // returns 92\n*/\nfunction dayOfQuarter( month, day, year ) {\n\tvar date;\n\tvar yr;\n\tvar q;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tdate = new Date();\n\t\tq = quarterOfYear( date );\n\t\td = dayOfYear( date );\n\t\tyr = date.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tdate = month;\n\t\t\tq = quarterOfYear( date );\n\t\t\td = dayOfYear( date );\n\t\t\tyr = date.getFullYear();\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. If only providing a single argument, must provide a Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( day ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', day ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tq = quarterOfYear( month );\n\t\td = dayOfYear( month, day, year );\n\t\tyr = year;\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn d - LEAP_YEAR[ q-1 ];\n\t}\n\treturn d - NON_LEAP_YEAR[ q-1 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = dayOfQuarter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the day of the quarter.\n*\n* @module @stdlib/time/day-of-quarter\n*\n* @example\n* var dayOfQuarter = require( '@stdlib/time/day-of-quarter' );\n*\n* var day = dayOfQuarter();\n* // returns <number>\n*\n* day = dayOfQuarter( new Date() );\n* // returns <number>\n*\n* day = dayOfQuarter( 12, 31, 2017 );\n* // returns 92\n*/\n\n// MODULES //\n\nvar dayOfQuarter = require( './day_of_quarter.js' );\n\n\n// EXPORTS //\n\nmodule.exports = dayOfQuarter;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 365;\nvar LEAP_YEAR = 366;\n\n\n// MAIN //\n\n/**\n* Returns the number of days in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of days in a year\n*\n* @example\n* var num = daysInYear();\n* // returns <number>\n*\n* @example\n* var num = daysInYear( 2016 );\n* // returns 366\n*\n* @example\n* var num = daysInYear( 2017 );\n* // returns 365\n*/\nfunction daysInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = ( new Date() ).getFullYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = daysInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of days in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/days-in-year\n*\n* @example\n* var daysInYear = require( '@stdlib/time/days-in-year' );\n*\n* var num = daysInYear();\n* // returns <number>\n*\n* num = daysInYear( 2016 );\n* // returns 366\n*\n* num = daysInYear( 2017 );\n* // returns 365\n*/\n\n// MODULES //\n\nvar daysInYear = require( './days_in_year.js' );\n\n\n// EXPORTS //\n\nmodule.exports = daysInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar HOURS_IN_DAY = require( '@stdlib/constants/time/hours-in-day' );\nvar HOURS_IN_MONTH = require( './hours.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of hours in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} hours in a month\n*\n* @example\n* var num = hoursInMonth();\n* // returns <number>\n*\n* @example\n* var num = hoursInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = hoursInMonth( 2, 2016 );\n* // returns 696\n*\n* @example\n* var num = hoursInMonth( 2, 2017 );\n* // returns 672\n*/\nfunction hoursInMonth( month, year ) {\n\tvar hrs;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = ( new Date() ).getFullYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\thrs = HOURS_IN_MONTH[ mon ];\n\tif ( hrs === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( hrs === 672 && isLeapYear( yr ) ) {\n\t\thrs += HOURS_IN_DAY;\n\t}\n\treturn hrs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hoursInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of hours in a month.\n*\n* @module @stdlib/time/hours-in-month\n*\n* @example\n* var hoursInMonth = require( '@stdlib/time/hours-in-month' );\n*\n* var num = hoursInMonth();\n* // returns <number>\n*\n* num = hoursInMonth( 2 );\n* // returns <number>\n*\n* num = hoursInMonth( 2, 2016 );\n* // returns 696\n*\n* num = hoursInMonth( 2, 2017 );\n* // returns 672\n*/\n\n// MODULES //\n\nvar hoursInMonth = require( './hours_in_month.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hoursInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 8760|0; // 365 * 24\nvar LEAP_YEAR = 8784|0; // 366 * 24\n\n\n// MAIN //\n\n/**\n* Returns the number of hours in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of hours in a year\n*\n* @example\n* var num = hoursInYear();\n* // returns <number>\n*\n* @example\n* var num = hoursInYear( 2016 );\n* // returns 8784\n*\n* @example\n* var num = hoursInYear( 2017 );\n* // returns 8760\n*/\nfunction hoursInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = ( new Date() ).getFullYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hoursInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of hours in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/hours-in-year\n*\n* @example\n* var hoursInYear = require( '@stdlib/time/hours-in-year' );\n*\n* var num = hoursInYear();\n* // returns <number>\n*\n* num = hoursInYear( 2016 );\n* // returns 8784\n*\n* num = hoursInYear( 2017 );\n* // returns 8760\n*/\n\n// MODULES //\n\nvar hoursInYear = require( './hours_in_year.js' );\n\n\n// EXPORTS //\n\nmodule.exports = hoursInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// VARIABLES //\n\nvar SHORT_YEAR = 52;\nvar LONG_YEAR = 53;\n\n\n// FUNCTIONS //\n\n/**\n* Formula for determining if a year is \"long\" or \"short\".\n*\n* @private\n* @param {integer} yr - year\n* @returns {integer} result\n*/\nfunction p( yr ) {\n\tvar v = yr + floor( yr/4 ) - floor( yr/100 ) + floor( yr/400 );\n\treturn v % 7;\n}\n\n\n// MAIN //\n\n/**\n* Returns the number of ISO weeks in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of ISO weeks in a year\n*\n* @example\n* var num = isoWeeksInYear();\n* // returns <number>\n*\n* @example\n* var num = isoWeeksInYear( 2015 );\n* // returns 53\n*\n* @example\n* var num = isoWeeksInYear( 2017 );\n* // returns 52\n*/\nfunction isoWeeksInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = ( new Date() ).getFullYear();\n\t}\n\tif ( p( yr ) === 4 || p( yr-1 ) === 3 ) {\n\t\treturn LONG_YEAR;\n\t}\n\treturn SHORT_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isoWeeksInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of ISO weeks in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/iso-weeks-in-year\n*\n* @example\n* var isoWeeksInYear = require( '@stdlib/time/iso-weeks-in-year' );\n*\n* var num = isoWeeksInYear();\n* // returns <number>\n*\n* num = isoWeeksInYear( 2015 );\n* // returns 53\n*\n* num = isoWeeksInYear( 2017 );\n* // returns 52\n*/\n\n// MODULES //\n\nvar isoWeeksInYear = require( './iso_weeks_in_year.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isoWeeksInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar MINUTES_IN_DAY = require( '@stdlib/constants/time/minutes-in-day' );\nvar MINUTES_IN_MONTH = require( './minutes.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of minutes in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} minutes in a month\n*\n* @example\n* var num = minutesInMonth();\n* // returns <number>\n*\n* @example\n* var num = minutesInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = minutesInMonth( 2, 2016 );\n* // returns 41760\n*\n* @example\n* var num = minutesInMonth( 2, 2017 );\n* // returns 40320\n*/\nfunction minutesInMonth( month, year ) {\n\tvar mins;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = ( new Date() ).getFullYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tmins = MINUTES_IN_MONTH[ mon ];\n\tif ( mins === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( mins === 40320 && isLeapYear( yr ) ) {\n\t\tmins += MINUTES_IN_DAY;\n\t}\n\treturn mins;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minutesInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of minutes in a month.\n*\n* @module @stdlib/time/minutes-in-month\n*\n* @example\n* var minutesInMonth = require( '@stdlib/time/minutes-in-month' );\n*\n* var num = minutesInMonth();\n* // returns <number>\n*\n* num = minutesInMonth( 2 );\n* // returns <number>\n*\n* num = minutesInMonth( 2, 2016 );\n* // returns 41760\n*\n* num = minutesInMonth( 2, 2017 );\n* // returns 40320\n*/\n\n// MODULES //\n\nvar minutesInMonth = require( './minutes_in_month.js' );\n\n\n// EXPORTS //\n\nmodule.exports = minutesInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 525600|0; // 365 * 24 * 60\nvar LEAP_YEAR = 527040|0; // 366 * 24 * 60\n\n\n// MAIN //\n\n/**\n* Returns the number of minutes in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of minutes in a year\n*\n* @example\n* var num = minutesInYear();\n* // returns <number>\n*\n* @example\n* var num = minutesInYear( 2016 );\n* // returns 527040\n*\n* @example\n* var num = minutesInYear( 2017 );\n* // returns 525600\n*/\nfunction minutesInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = ( new Date() ).getFullYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = minutesInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of minutes in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/minutes-in-year\n*\n* @example\n* var minutesInYear = require( '@stdlib/time/minutes-in-year' );\n*\n* var num = minutesInYear();\n* // returns <number>\n*\n* num = minutesInYear( 2016 );\n* // returns 527040\n*\n* num = minutesInYear( 2017 );\n* // returns 525600\n*/\n\n// MODULES //\n\nvar minutesInYear = require( './minutes_in_year.js' );\n\n\n// EXPORTS //\n\nmodule.exports = minutesInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert/is-function' );\n\n\n// MAIN //\n\nvar bool = isFunction( Date.now );\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar round = require( '@stdlib/math/base/special/round' );\n\n\n// MAIN //\n\n/**\n* Returns the time in seconds since the epoch.\n*\n* @returns {integer32} time\n*\n* @example\n* var ts = now();\n* // returns <number>\n*/\nfunction now() {\n\tvar ts = round( Date.now() / 1000 );\n\treturn ts|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = now;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar round = require( '@stdlib/math/base/special/round' );\n\n\n// MAIN //\n\n/**\n* Returns the time in seconds since the epoch.\n*\n* @private\n* @returns {integer32} time\n*\n* @example\n* var ts = now();\n* // returns <number>\n*/\nfunction now() {\n\tvar ts;\n\tvar d;\n\n\td = new Date();\n\tts = round( d.getTime() / 1000 );\n\treturn ts|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = now;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Time in seconds since the epoch.\n*\n* @module @stdlib/time/now\n*\n* @example\n* var now = require( '@stdlib/time/now' );\n*\n* var ts = now();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar bool = require( './detect.js' );\nvar main = require( './now.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar now;\nif ( bool ) {\n\tnow = main;\n} else {\n\tnow = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = now;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string/lowercase' );\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\nvar SECONDS_IN_DAY = require( '@stdlib/constants/time/seconds-in-day' );\nvar SECONDS_IN_MONTH = require( './seconds.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of seconds in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} seconds in a month\n*\n* @example\n* var num = secondsInMonth();\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2, 2016 );\n* // returns 2505600\n*\n* @example\n* var num = secondsInMonth( 2, 2017 );\n* // returns 2419200\n*/\nfunction secondsInMonth( month, year ) {\n\tvar secs;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = ( new Date() ).getFullYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tsecs = SECONDS_IN_MONTH[ mon ];\n\tif ( secs === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( secs === 2419200 && isLeapYear( yr ) ) {\n\t\tsecs += SECONDS_IN_DAY;\n\t}\n\treturn secs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = secondsInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of seconds in a month.\n*\n* @module @stdlib/time/seconds-in-month\n*\n* @example\n* var secondsInMonth = require( '@stdlib/time/seconds-in-month' );\n*\n* var num = secondsInMonth();\n* // returns <number>\n*\n* num = secondsInMonth( 2 );\n* // returns <number>\n*\n* num = secondsInMonth( 2, 2016 );\n* // returns 2505600\n*\n* num = secondsInMonth( 2, 2017 );\n* // returns 2419200\n*/\n\n// MODULES //\n\nvar secondsInMonth = require( './seconds_in_month.js' );\n\n\n// EXPORTS //\n\nmodule.exports = secondsInMonth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert/is-date-object' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isLeapYear = require( '@stdlib/assert/is-leap-year' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar NON_LEAP_YEAR = 31536000|0; // 365 * 86400\nvar LEAP_YEAR = 31622400|0; // 366 * 86400\n\n\n// MAIN //\n\n/**\n* Returns the number of seconds in a year.\n*\n* @param {(integer|Date)} value - year or `Date` object\n* @throws {TypeError} must provide either an integer or a `Date` object\n* @returns {integer} number of seconds in a year\n*\n* @example\n* var num = secondsInYear();\n* // returns <number>\n*\n* @example\n* var num = secondsInYear( 2016 );\n* // returns 31622400\n*\n* @example\n* var num = secondsInYear( 2017 );\n* // returns 31536000\n*/\nfunction secondsInYear( value ) {\n\tvar yr;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( value ) ) {\n\t\t\tyr = value.getFullYear();\n\t\t} else if ( isInteger( value ) ) {\n\t\t\tyr = value;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either an integer or a Date object. Value: `%s`.', value ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application could cross over into a new year:\n\t\tyr = ( new Date() ).getFullYear();\n\t}\n\tif ( isLeapYear( yr ) ) {\n\t\treturn LEAP_YEAR;\n\t}\n\treturn NON_LEAP_YEAR;\n}\n\n\n// EXPORTS //\n\nmodule.exports = secondsInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of seconds in a year according to the Gregorian calendar.\n*\n* @module @stdlib/time/seconds-in-year\n*\n* @example\n* var secondsInYear = require( '@stdlib/time/seconds-in-year' );\n*\n* var num = secondsInYear();\n* // returns <number>\n*\n* num = secondsInYear( 2016 );\n* // returns 31622400\n*\n* num = secondsInYear( 2017 );\n* // returns 31536000\n*/\n\n// MODULES //\n\nvar secondsInYear = require( './seconds_in_year.js' );\n\n\n// EXPORTS //\n\nmodule.exports = secondsInYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar proc = require( 'process' );\n\n\n// MAIN //\n\n/**\n* Returns a high-resolution time.\n*\n* ## Notes\n*\n* -   Output format: `[seconds, nanoseconds]`.\n*\n*\n* @returns {NumberArray} high resolution time\n*\n* @example\n* var t = tic();\n* // returns [<number>,<number>]\n*/\nfunction tic() {\n\treturn proc.hrtime();\n}\n\n\n// EXPORTS //\n\nmodule.exports = tic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a high-resolution time.\n*\n* @module @stdlib/time/tic\n*\n* @example\n* var tic = require( '@stdlib/time/tic' );\n*\n* var t = tic();\n* // returns [<number>,<number>]\n*/\n\n// MODULES //\n\nvar tic = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = tic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;\nvar format = require( '@stdlib/string/format' );\nvar tic = require( './../../tic' );\n\n\n// MAIN //\n\n/**\n* Returns a high-resolution time difference.\n*\n* ## Notes\n*\n* -   Output format: `[seconds, nanoseconds]`.\n*\n*\n* @param {NonNegativeIntegerArray} time - high-resolution time\n* @throws {TypeError} must provide a nonnegative integer array\n* @throws {RangeError} input array must have length `2`\n* @returns {NumberArray} high resolution time difference\n*\n* @example\n* var tic = require( '@stdlib/time/tic' );\n*\n* var start = tic();\n* var delta = toc( start );\n* // returns [<number>,<number>]\n*/\nfunction toc( time ) {\n\tvar now = tic();\n\tvar sec;\n\tvar ns;\n\tif ( !isNonNegativeIntegerArray( time ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array of nonnegative integers. Value: `%s`.', time ) );\n\t}\n\tif ( time.length !== 2 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Input array must contain two elements. Value: `%s`.', time ) );\n\t}\n\tsec = now[ 0 ] - time[ 0 ];\n\tns = now[ 1 ] - time[ 1 ];\n\tif ( sec > 0 && ns < 0 ) {\n\t\tsec -= 1;\n\t\tns += 1e9;\n\t}\n\telse if ( sec < 0 && ns > 0 ) {\n\t\tsec += 1;\n\t\tns -= 1e9;\n\t}\n\treturn [ sec, ns ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = toc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a high-resolution time difference.\n*\n* @module @stdlib/time/toc\n*\n* @example\n* var tic = require( '@stdlib/time/tic' );\n* var toc = require( '@stdlib/time/toc' );\n*\n* var start = tic();\n* var delta = toc( start );\n* // returns [<number>,<number>]\n*/\n\n// MODULES //\n\nvar toc = require( './toc.js' );\n\n\n// EXPORTS //\n\nmodule.exports = toc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name constants\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/time}\n*/\nimport constants from '@stdlib/constants/time';\nsetReadOnly( ns, 'constants', constants );\n\n/**\n* @name dayOfQuarter\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/day-of-quarter}\n*/\nimport dayOfQuarter from './../day-of-quarter';\nsetReadOnly( ns, 'dayOfQuarter', dayOfQuarter );\n\n/**\n* @name dayOfYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/day-of-year}\n*/\nimport dayOfYear from './../day-of-year';\nsetReadOnly( ns, 'dayOfYear', dayOfYear );\n\n/**\n* @name daysInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/days-in-month}\n*/\nimport daysInMonth from './../days-in-month';\nsetReadOnly( ns, 'daysInMonth', daysInMonth );\n\n/**\n* @name daysInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/days-in-year}\n*/\nimport daysInYear from './../days-in-year';\nsetReadOnly( ns, 'daysInYear', daysInYear );\n\n/**\n* @name hoursInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/hours-in-month}\n*/\nimport hoursInMonth from './../hours-in-month';\nsetReadOnly( ns, 'hoursInMonth', hoursInMonth );\n\n/**\n* @name hoursInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/hours-in-year}\n*/\nimport hoursInYear from './../hours-in-year';\nsetReadOnly( ns, 'hoursInYear', hoursInYear );\n\n/**\n* @name isoWeeksInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/iso-weeks-in-year}\n*/\nimport isoWeeksInYear from './../iso-weeks-in-year';\nsetReadOnly( ns, 'isoWeeksInYear', isoWeeksInYear );\n\n/**\n* @name minutesInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/minutes-in-month}\n*/\nimport minutesInMonth from './../minutes-in-month';\nsetReadOnly( ns, 'minutesInMonth', minutesInMonth );\n\n/**\n* @name minutesInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/minutes-in-year}\n*/\nimport minutesInYear from './../minutes-in-year';\nsetReadOnly( ns, 'minutesInYear', minutesInYear );\n\n/**\n* @name now\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/now}\n*/\nimport now from './../now';\nsetReadOnly( ns, 'now', now );\n\n/**\n* @name quarterOfYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/quarter-of-year}\n*/\nimport quarterOfYear from './../quarter-of-year';\nsetReadOnly( ns, 'quarterOfYear', quarterOfYear );\n\n/**\n* @name secondsInMonth\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/seconds-in-month}\n*/\nimport secondsInMonth from './../seconds-in-month';\nsetReadOnly( ns, 'secondsInMonth', secondsInMonth );\n\n/**\n* @name secondsInYear\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/seconds-in-year}\n*/\nimport secondsInYear from './../seconds-in-year';\nsetReadOnly( ns, 'secondsInYear', secondsInYear );\n\n/**\n* @name tic\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/tic}\n*/\nimport tic from './../tic';\nsetReadOnly( ns, 'tic', tic );\n\n/**\n* @name toc\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/time/toc}\n*/\nimport toc from './../toc';\nsetReadOnly( ns, 'toc', toc );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["isDateObject","require$$0","isString","require$$1","isPrimitive","isInteger","require$$2","lowercase","require$$3","isLeapYear","require$$4","format","require$$5","DAYS_IN_MONTH","require$$6","lib","month","year","days","mon","yr","d","arguments","length","Date","getMonth","getFullYear","TypeError","RangeError","toString","Error","daysInMonth","MONTHS","require$$7","DAYS","day","date","num","i","getDate","QUARTERS","q","dayOfYear","quarterOfYear","NON_LEAP_YEAR","LEAP_YEAR","value","HOURS_IN_DAY","HOURS_IN_MONTH","hrs","floor","p","MINUTES_IN_DAY","MINUTES_IN_MONTH","mins","bool","now","round","getTime","SECONDS_IN_DAY","SECONDS_IN_MONTH","secs","proc","hrtime","isNonNegativeIntegerArray","primitives","tic","toc_1","time","sec","ns","setReadOnly","constants","dayOfQuarter","daysInYear","hoursInMonth","hoursInYear","isoWeeksInYear","minutesInMonth","minutesInYear","secondsInMonth","secondsInYear","toc"],"mappings":"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"}